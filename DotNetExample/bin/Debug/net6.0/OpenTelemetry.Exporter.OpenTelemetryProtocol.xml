<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OpenTelemetry.Exporter.OpenTelemetryProtocol</name>
    </assembly>
    <members>
        <member name="T:OpenTelemetry.Exporter.OpenTelemetryProtocol.Implementation.ExportClient.BaseOtlpGrpcExportClient`1">
            <summary>Base class for sending OTLP export request over gRPC.</summary>
            <typeparam name="TRequest">Type of export request.</typeparam>
        </member>
        <member name="M:OpenTelemetry.Exporter.OpenTelemetryProtocol.Implementation.ExportClient.BaseOtlpGrpcExportClient`1.SendExportRequest(`0,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenTelemetry.Exporter.OpenTelemetryProtocol.Implementation.ExportClient.BaseOtlpGrpcExportClient`1.Shutdown(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:OpenTelemetry.Exporter.OpenTelemetryProtocol.Implementation.ExportClient.BaseOtlpHttpExportClient`1">
            <summary>Base class for sending OTLP export request over HTTP.</summary>
            <typeparam name="TRequest">Type of export request.</typeparam>
        </member>
        <member name="M:OpenTelemetry.Exporter.OpenTelemetryProtocol.Implementation.ExportClient.BaseOtlpHttpExportClient`1.SendExportRequest(`0,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenTelemetry.Exporter.OpenTelemetryProtocol.Implementation.ExportClient.BaseOtlpHttpExportClient`1.Shutdown(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:OpenTelemetry.Exporter.OpenTelemetryProtocol.Implementation.ExportClient.IExportClient`1">
            <summary>Export client interface.</summary>
            <typeparam name="TRequest">Type of export request.</typeparam>
        </member>
        <member name="M:OpenTelemetry.Exporter.OpenTelemetryProtocol.Implementation.ExportClient.IExportClient`1.SendExportRequest(`0,System.Threading.CancellationToken)">
            <summary>
            Method for sending export request to the server.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>True if the request has been sent successfully, otherwise false.</returns>
        </member>
        <member name="M:OpenTelemetry.Exporter.OpenTelemetryProtocol.Implementation.ExportClient.IExportClient`1.Shutdown(System.Int32)">
            <summary>
            Method for shutting down the export client.
            </summary>
            <param name="timeoutMilliseconds">
            The number of milliseconds to wait, or <c>Timeout.Infinite</c> to
            wait indefinitely.
            </param>
            <returns>
            Returns <c>true</c> if shutdown succeeded; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:OpenTelemetry.Exporter.OpenTelemetryProtocol.Implementation.ExportClient.OtlpGrpcLogExportClient">
            <summary>Class for sending OTLP Logs export request over gRPC.</summary>
        </member>
        <member name="M:OpenTelemetry.Exporter.OpenTelemetryProtocol.Implementation.ExportClient.OtlpGrpcLogExportClient.SendExportRequest(OpenTelemetry.Proto.Collector.Logs.V1.ExportLogsServiceRequest,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:OpenTelemetry.Exporter.OpenTelemetryProtocol.Implementation.ExportClient.OtlpGrpcMetricsExportClient">
            <summary>Class for sending OTLP metrics export request over gRPC.</summary>
        </member>
        <member name="M:OpenTelemetry.Exporter.OpenTelemetryProtocol.Implementation.ExportClient.OtlpGrpcMetricsExportClient.SendExportRequest(OpenTelemetry.Proto.Collector.Metrics.V1.ExportMetricsServiceRequest,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:OpenTelemetry.Exporter.OpenTelemetryProtocol.Implementation.ExportClient.OtlpGrpcTraceExportClient">
            <summary>Class for sending OTLP trace export request over gRPC.</summary>
        </member>
        <member name="M:OpenTelemetry.Exporter.OpenTelemetryProtocol.Implementation.ExportClient.OtlpGrpcTraceExportClient.SendExportRequest(OpenTelemetry.Proto.Collector.Trace.V1.ExportTraceServiceRequest,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:OpenTelemetry.Exporter.OpenTelemetryProtocol.Implementation.ExportClient.OtlpHttpLogExportClient">
            <summary>Class for sending OTLP log export request over HTTP.</summary>
        </member>
        <member name="T:OpenTelemetry.Exporter.OpenTelemetryProtocol.Implementation.ExportClient.OtlpHttpMetricsExportClient">
            <summary>Class for sending OTLP metrics export request over HTTP.</summary>
        </member>
        <member name="T:OpenTelemetry.Exporter.OpenTelemetryProtocol.Implementation.ExportClient.OtlpHttpTraceExportClient">
            <summary>Class for sending OTLP trace export request over HTTP.</summary>
        </member>
        <member name="P:OpenTelemetry.Exporter.OpenTelemetryProtocol.Implementation.SdkLimitOptions.AttributeValueLengthLimit">
            <summary>
            Gets or sets the maximum allowed attribute value size.
            </summary>
        </member>
        <member name="P:OpenTelemetry.Exporter.OpenTelemetryProtocol.Implementation.SdkLimitOptions.AttributeCountLimit">
            <summary>
            Gets or sets the maximum allowed attribute count.
            </summary>
        </member>
        <member name="P:OpenTelemetry.Exporter.OpenTelemetryProtocol.Implementation.SdkLimitOptions.SpanAttributeValueLengthLimit">
            <summary>
            Gets or sets the maximum allowed span attribute value size.
            </summary>
            <remarks>
            Note: Overrides the <see cref="P:OpenTelemetry.Exporter.OpenTelemetryProtocol.Implementation.SdkLimitOptions.AttributeValueLengthLimit"/> setting for spans if specified.
            </remarks>
        </member>
        <member name="P:OpenTelemetry.Exporter.OpenTelemetryProtocol.Implementation.SdkLimitOptions.SpanAttributeCountLimit">
            <summary>
            Gets or sets the maximum allowed span attribute count.
            </summary>
            <remarks>
            Note: Overrides the <see cref="P:OpenTelemetry.Exporter.OpenTelemetryProtocol.Implementation.SdkLimitOptions.AttributeCountLimit"/> setting for spans if specified.
            </remarks>
        </member>
        <member name="P:OpenTelemetry.Exporter.OpenTelemetryProtocol.Implementation.SdkLimitOptions.SpanEventCountLimit">
            <summary>
            Gets or sets the maximum allowed span event count.
            </summary>
        </member>
        <member name="P:OpenTelemetry.Exporter.OpenTelemetryProtocol.Implementation.SdkLimitOptions.SpanLinkCountLimit">
            <summary>
            Gets or sets the maximum allowed span link count.
            </summary>
        </member>
        <member name="P:OpenTelemetry.Exporter.OpenTelemetryProtocol.Implementation.SdkLimitOptions.SpanEventAttributeCountLimit">
            <summary>
            Gets or sets the maximum allowed span event attribute count.
            </summary>
            <remarks>
            Note: Overrides the <see cref="P:OpenTelemetry.Exporter.OpenTelemetryProtocol.Implementation.SdkLimitOptions.SpanAttributeCountLimit"/> setting for span events if specified.
            </remarks>
        </member>
        <member name="P:OpenTelemetry.Exporter.OpenTelemetryProtocol.Implementation.SdkLimitOptions.SpanLinkAttributeCountLimit">
            <summary>
            Gets or sets the maximum allowed span link attribute count.
            </summary>
            <remarks>
            Note: Overrides the <see cref="P:OpenTelemetry.Exporter.OpenTelemetryProtocol.Implementation.SdkLimitOptions.SpanAttributeCountLimit"/> setting for span links if specified.
            </remarks>
        </member>
        <member name="T:OpenTelemetry.Exporter.OpenTelemetryProtocol.Implementation.TimestampHelpers">
            <summary>
            Helpers to convert .NET time related types to the timestamp used in OTLP.
            </summary>
        </member>
        <member name="T:OpenTelemetry.Exporter.OtlpExporterOptions">
            <summary>
            OpenTelemetry Protocol (OTLP) exporter options.
            OTEL_EXPORTER_OTLP_ENDPOINT, OTEL_EXPORTER_OTLP_HEADERS, OTEL_EXPORTER_OTLP_TIMEOUT, OTEL_EXPORTER_OTLP_PROTOCOL
            environment variables are parsed during object construction.
            </summary>
        </member>
        <member name="M:OpenTelemetry.Exporter.OtlpExporterOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OpenTelemetry.Exporter.OtlpExporterOptions"/> class.
            </summary>
        </member>
        <member name="P:OpenTelemetry.Exporter.OtlpExporterOptions.Endpoint">
            <summary>
            Gets or sets the target to which the exporter is going to send telemetry.
            Must be a valid Uri with scheme (http or https) and host, and
            may contain a port and path. The default value is
            * http://localhost:4317 for <see cref="F:OpenTelemetry.Exporter.OtlpExportProtocol.Grpc"/>
            * http://localhost:4318 for <see cref="F:OpenTelemetry.Exporter.OtlpExportProtocol.HttpProtobuf"/>.
            </summary>
        </member>
        <member name="P:OpenTelemetry.Exporter.OtlpExporterOptions.Headers">
            <summary>
            Gets or sets optional headers for the connection. Refer to the <a href="https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/protocol/exporter.md#specifying-headers-via-environment-variables">
            specification</a> for information on the expected format for Headers.
            </summary>
        </member>
        <member name="P:OpenTelemetry.Exporter.OtlpExporterOptions.TimeoutMilliseconds">
            <summary>
            Gets or sets the max waiting time (in milliseconds) for the backend to process each batch. The default value is 10000.
            </summary>
        </member>
        <member name="P:OpenTelemetry.Exporter.OtlpExporterOptions.Protocol">
            <summary>
            Gets or sets the the OTLP transport protocol. Supported values: Grpc and HttpProtobuf.
            </summary>
        </member>
        <member name="P:OpenTelemetry.Exporter.OtlpExporterOptions.ExportProcessorType">
            <summary>
            Gets or sets the export processor type to be used with the OpenTelemetry Protocol Exporter. The default value is <see cref="F:OpenTelemetry.ExportProcessorType.Batch"/>.
            </summary>
        </member>
        <member name="P:OpenTelemetry.Exporter.OtlpExporterOptions.BatchExportProcessorOptions">
            <summary>
            Gets or sets the BatchExportProcessor options. Ignored unless ExportProcessorType is Batch.
            </summary>
        </member>
        <member name="P:OpenTelemetry.Exporter.OtlpExporterOptions.HttpClientFactory">
            <summary>
            Gets or sets the factory function called to create the <see
            cref="T:System.Net.Http.HttpClient"/> instance that will be used at runtime to
            transmit telemetry over HTTP. The returned instance will be reused
            for all export invocations.
            </summary>
            <remarks>
            Notes:
            <list type="bullet">
            <item>This is only invoked for the <see
            cref="F:OpenTelemetry.Exporter.OtlpExportProtocol.HttpProtobuf"/> protocol.</item>
            <item>The default behavior when using the <see
            cref="M:OpenTelemetry.Trace.OtlpTraceExporterHelperExtensions.AddOtlpExporter(OpenTelemetry.Trace.TracerProviderBuilder,System.Action{OpenTelemetry.Exporter.OtlpExporterOptions})"/> extension is if an <a
            href="https://docs.microsoft.com/dotnet/api/system.net.http.ihttpclientfactory">IHttpClientFactory</a>
            instance can be resolved through the application <see
            cref="T:System.IServiceProvider"/> then an <see cref="T:System.Net.Http.HttpClient"/> will be
            created through the factory with the name "OtlpTraceExporter"
            otherwise an <see cref="T:System.Net.Http.HttpClient"/> will be instantiated
            directly.</item>
            <item>The default behavior when using the <see
            cref="M:OpenTelemetry.Metrics.OtlpMetricExporterExtensions.AddOtlpExporter(OpenTelemetry.Metrics.MeterProviderBuilder,System.Action{OpenTelemetry.Exporter.OtlpExporterOptions})"/> extension is if an <a
            href="https://docs.microsoft.com/dotnet/api/system.net.http.ihttpclientfactory">IHttpClientFactory</a>
            instance can be resolved through the application <see
            cref="T:System.IServiceProvider"/> then an <see cref="T:System.Net.Http.HttpClient"/> will be
            created through the factory with the name "OtlpMetricExporter"
            otherwise an <see cref="T:System.Net.Http.HttpClient"/> will be instantiated
            directly.</item>
            </list>
            </remarks>
        </member>
        <member name="P:OpenTelemetry.Exporter.OtlpExporterOptions.ProgrammaticallyModifiedEndpoint">
            <summary>
            Gets a value indicating whether <see cref="P:OpenTelemetry.Exporter.OtlpExporterOptions.Endpoint" /> was modified via its setter.
            </summary>
        </member>
        <member name="T:OpenTelemetry.Exporter.OtlpExportProtocol">
            <summary>
            Supported by OTLP exporter protocol types according to the specification https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/protocol/exporter.md.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Exporter.OtlpExportProtocol.Grpc">
            <summary>
            OTLP over gRPC (corresponds to 'grpc' Protocol configuration option). Used as default.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Exporter.OtlpExportProtocol.HttpProtobuf">
            <summary>
            OTLP over HTTP with protobuf payloads (corresponds to 'http/protobuf' Protocol configuration option).
            </summary>
        </member>
        <member name="T:OpenTelemetry.Exporter.OtlpLogExporter">
            <summary>
            Exporter consuming <see cref="T:OpenTelemetry.Logs.LogRecord"/> and exporting the data using
            the OpenTelemetry protocol (OTLP).
            </summary>
        </member>
        <member name="M:OpenTelemetry.Exporter.OtlpLogExporter.#ctor(OpenTelemetry.Exporter.OtlpExporterOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenTelemetry.Exporter.OtlpLogExporter"/> class.
            </summary>
            <param name="options">Configuration options for the exporter.</param>
        </member>
        <member name="M:OpenTelemetry.Exporter.OtlpLogExporter.#ctor(OpenTelemetry.Exporter.OtlpExporterOptions,OpenTelemetry.Exporter.OpenTelemetryProtocol.Implementation.SdkLimitOptions,OpenTelemetry.Exporter.OpenTelemetryProtocol.Implementation.ExportClient.IExportClient{OpenTelemetry.Proto.Collector.Logs.V1.ExportLogsServiceRequest})">
            <summary>
            Initializes a new instance of the <see cref="T:OpenTelemetry.Exporter.OtlpLogExporter"/> class.
            </summary>
            <param name="exporterOptions">Configuration options for the exporter.</param>
            <param name="sdkLimitOptions"><see cref="T:OpenTelemetry.Exporter.OpenTelemetryProtocol.Implementation.SdkLimitOptions"/>.</param>
            <param name="exportClient">Client used for sending export request.</param>
        </member>
        <member name="M:OpenTelemetry.Exporter.OtlpLogExporter.Export(OpenTelemetry.Batch{OpenTelemetry.Logs.LogRecord}@)">
            <inheritdoc/>
        </member>
        <member name="M:OpenTelemetry.Exporter.OtlpLogExporter.OnShutdown(System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:OpenTelemetry.Exporter.OtlpMetricExporter">
            <summary>
            Exporter consuming <see cref="T:OpenTelemetry.Metrics.Metric"/> and exporting the data using
            the OpenTelemetry protocol (OTLP).
            </summary>
        </member>
        <member name="M:OpenTelemetry.Exporter.OtlpMetricExporter.#ctor(OpenTelemetry.Exporter.OtlpExporterOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenTelemetry.Exporter.OtlpMetricExporter"/> class.
            </summary>
            <param name="options">Configuration options for the exporter.</param>
        </member>
        <member name="M:OpenTelemetry.Exporter.OtlpMetricExporter.#ctor(OpenTelemetry.Exporter.OtlpExporterOptions,OpenTelemetry.Exporter.OpenTelemetryProtocol.Implementation.ExportClient.IExportClient{OpenTelemetry.Proto.Collector.Metrics.V1.ExportMetricsServiceRequest})">
            <summary>
            Initializes a new instance of the <see cref="T:OpenTelemetry.Exporter.OtlpMetricExporter"/> class.
            </summary>
            <param name="options">Configuration options for the export.</param>
            <param name="exportClient">Client used for sending export request.</param>
        </member>
        <member name="M:OpenTelemetry.Exporter.OtlpMetricExporter.Export(OpenTelemetry.Batch{OpenTelemetry.Metrics.Metric}@)">
            <inheritdoc />
        </member>
        <member name="M:OpenTelemetry.Exporter.OtlpMetricExporter.OnShutdown(System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:OpenTelemetry.Exporter.OtlpTraceExporter">
            <summary>
            Exporter consuming <see cref="T:System.Diagnostics.Activity"/> and exporting the data using
            the OpenTelemetry protocol (OTLP).
            </summary>
        </member>
        <member name="M:OpenTelemetry.Exporter.OtlpTraceExporter.#ctor(OpenTelemetry.Exporter.OtlpExporterOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenTelemetry.Exporter.OtlpTraceExporter"/> class.
            </summary>
            <param name="options">Configuration options for the export.</param>
        </member>
        <member name="M:OpenTelemetry.Exporter.OtlpTraceExporter.#ctor(OpenTelemetry.Exporter.OtlpExporterOptions,OpenTelemetry.Exporter.OpenTelemetryProtocol.Implementation.SdkLimitOptions,OpenTelemetry.Exporter.OpenTelemetryProtocol.Implementation.ExportClient.IExportClient{OpenTelemetry.Proto.Collector.Trace.V1.ExportTraceServiceRequest})">
            <summary>
            Initializes a new instance of the <see cref="T:OpenTelemetry.Exporter.OtlpTraceExporter"/> class.
            </summary>
            <param name="exporterOptions"><see cref="T:OpenTelemetry.Exporter.OtlpExporterOptions"/>.</param>
            <param name="sdkLimitOptions"><see cref="T:OpenTelemetry.Exporter.OpenTelemetryProtocol.Implementation.SdkLimitOptions"/>.</param>
            <param name="exportClient">Client used for sending export request.</param>
        </member>
        <member name="M:OpenTelemetry.Exporter.OtlpTraceExporter.Export(OpenTelemetry.Batch{System.Diagnostics.Activity}@)">
            <inheritdoc/>
        </member>
        <member name="M:OpenTelemetry.Exporter.OtlpTraceExporter.OnShutdown(System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:OpenTelemetry.Metrics.OtlpMetricExporterExtensions">
            <summary>
            Extension methods to simplify registering of the OpenTelemetry Protocol (OTLP) exporter.
            </summary>
        </member>
        <member name="M:OpenTelemetry.Metrics.OtlpMetricExporterExtensions.AddOtlpExporter(OpenTelemetry.Metrics.MeterProviderBuilder)">
            <summary>
            Adds <see cref="T:OpenTelemetry.Exporter.OtlpMetricExporter"/> to the <see cref="T:OpenTelemetry.Metrics.MeterProviderBuilder"/> using default options.
            </summary>
            <param name="builder"><see cref="T:OpenTelemetry.Metrics.MeterProviderBuilder"/> builder to use.</param>
            <returns>The instance of <see cref="T:OpenTelemetry.Metrics.MeterProviderBuilder"/> to chain the calls.</returns>
        </member>
        <member name="M:OpenTelemetry.Metrics.OtlpMetricExporterExtensions.AddOtlpExporter(OpenTelemetry.Metrics.MeterProviderBuilder,System.Action{OpenTelemetry.Exporter.OtlpExporterOptions})">
            <summary>
            Adds <see cref="T:OpenTelemetry.Exporter.OtlpMetricExporter"/> to the <see cref="T:OpenTelemetry.Metrics.MeterProviderBuilder"/>.
            </summary>
            <param name="builder"><see cref="T:OpenTelemetry.Metrics.MeterProviderBuilder"/> builder to use.</param>
            <param name="configureExporter">Callback action for configuring <see cref="T:OpenTelemetry.Exporter.OtlpExporterOptions"/>.</param>
            <returns>The instance of <see cref="T:OpenTelemetry.Metrics.MeterProviderBuilder"/> to chain the calls.</returns>
        </member>
        <member name="M:OpenTelemetry.Metrics.OtlpMetricExporterExtensions.AddOtlpExporter(OpenTelemetry.Metrics.MeterProviderBuilder,System.String,System.Action{OpenTelemetry.Exporter.OtlpExporterOptions})">
            <summary>
            Adds <see cref="T:OpenTelemetry.Exporter.OtlpMetricExporter"/> to the <see cref="T:OpenTelemetry.Metrics.MeterProviderBuilder"/>.
            </summary>
            <param name="builder"><see cref="T:OpenTelemetry.Metrics.MeterProviderBuilder"/> builder to use.</param>
            <param name="name">Name which is used when retrieving options.</param>
            <param name="configureExporter">Callback action for configuring <see cref="T:OpenTelemetry.Exporter.OtlpExporterOptions"/>.</param>
            <returns>The instance of <see cref="T:OpenTelemetry.Metrics.MeterProviderBuilder"/> to chain the calls.</returns>
        </member>
        <member name="M:OpenTelemetry.Metrics.OtlpMetricExporterExtensions.AddOtlpExporter(OpenTelemetry.Metrics.MeterProviderBuilder,System.Action{OpenTelemetry.Exporter.OtlpExporterOptions,OpenTelemetry.Metrics.MetricReaderOptions})">
            <summary>
            Adds <see cref="T:OpenTelemetry.Exporter.OtlpMetricExporter"/> to the <see cref="T:OpenTelemetry.Metrics.MeterProviderBuilder"/>.
            </summary>
            <param name="builder"><see cref="T:OpenTelemetry.Metrics.MeterProviderBuilder"/> builder to use.</param>
            <param name="configureExporterAndMetricReader">Callback action for
            configuring <see cref="T:OpenTelemetry.Exporter.OtlpExporterOptions"/> and <see
            cref="T:OpenTelemetry.Metrics.MetricReaderOptions"/>.</param>
            <returns>The instance of <see cref="T:OpenTelemetry.Metrics.MeterProviderBuilder"/> to chain the calls.</returns>
        </member>
        <member name="M:OpenTelemetry.Metrics.OtlpMetricExporterExtensions.AddOtlpExporter(OpenTelemetry.Metrics.MeterProviderBuilder,System.String,System.Action{OpenTelemetry.Exporter.OtlpExporterOptions,OpenTelemetry.Metrics.MetricReaderOptions})">
            <summary>
            Adds <see cref="T:OpenTelemetry.Exporter.OtlpMetricExporter"/> to the <see cref="T:OpenTelemetry.Metrics.MeterProviderBuilder"/>.
            </summary>
            <param name="builder"><see cref="T:OpenTelemetry.Metrics.MeterProviderBuilder"/> builder to use.</param>
            <param name="name">Name which is used when retrieving options.</param>
            <param name="configureExporterAndMetricReader">Callback action for
            configuring <see cref="T:OpenTelemetry.Exporter.OtlpExporterOptions"/> and <see
            cref="T:OpenTelemetry.Metrics.MetricReaderOptions"/>.</param>
            <returns>The instance of <see cref="T:OpenTelemetry.Metrics.MeterProviderBuilder"/> to chain the calls.</returns>
        </member>
        <member name="T:OpenTelemetry.Trace.OtlpTraceExporterHelperExtensions">
            <summary>
            Extension methods to simplify registering of the OpenTelemetry Protocol (OTLP) exporter.
            </summary>
        </member>
        <member name="M:OpenTelemetry.Trace.OtlpTraceExporterHelperExtensions.AddOtlpExporter(OpenTelemetry.Trace.TracerProviderBuilder)">
            <summary>
            Adds OpenTelemetry Protocol (OTLP) exporter to the TracerProvider.
            </summary>
            <param name="builder"><see cref="T:OpenTelemetry.Trace.TracerProviderBuilder"/> builder to use.</param>
            <returns>The instance of <see cref="T:OpenTelemetry.Trace.TracerProviderBuilder"/> to chain the calls.</returns>
        </member>
        <member name="M:OpenTelemetry.Trace.OtlpTraceExporterHelperExtensions.AddOtlpExporter(OpenTelemetry.Trace.TracerProviderBuilder,System.Action{OpenTelemetry.Exporter.OtlpExporterOptions})">
            <summary>
            Adds OpenTelemetry Protocol (OTLP) exporter to the TracerProvider.
            </summary>
            <param name="builder"><see cref="T:OpenTelemetry.Trace.TracerProviderBuilder"/> builder to use.</param>
            <param name="configure">Callback action for configuring <see cref="T:OpenTelemetry.Exporter.OtlpExporterOptions"/>.</param>
            <returns>The instance of <see cref="T:OpenTelemetry.Trace.TracerProviderBuilder"/> to chain the calls.</returns>
        </member>
        <member name="M:OpenTelemetry.Trace.OtlpTraceExporterHelperExtensions.AddOtlpExporter(OpenTelemetry.Trace.TracerProviderBuilder,System.String,System.Action{OpenTelemetry.Exporter.OtlpExporterOptions})">
            <summary>
            Adds OpenTelemetry Protocol (OTLP) exporter to the TracerProvider.
            </summary>
            <param name="builder"><see cref="T:OpenTelemetry.Trace.TracerProviderBuilder"/> builder to use.</param>
            <param name="name">Name which is used when retrieving options.</param>
            <param name="configure">Callback action for configuring <see cref="T:OpenTelemetry.Exporter.OtlpExporterOptions"/>.</param>
            <returns>The instance of <see cref="T:OpenTelemetry.Trace.TracerProviderBuilder"/> to chain the calls.</returns>
        </member>
        <member name="T:OpenTelemetry.Trace.SemanticConventions">
            <summary>
            Constants for semantic attribute names outlined by the OpenTelemetry specifications.
            <see href="https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/semantic_conventions/README.md"/> and
            <see href="https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/metrics/semantic_conventions/README.md"/>.
            </summary>
        </member>
        <member name="T:OpenTelemetry.Trace.SpanAttributeConstants">
            <summary>
            Defines well-known span attribute keys.
            </summary>
        </member>
        <member name="M:OpenTelemetry.Internal.ExceptionExtensions.ToInvariantString(System.Exception)">
            <summary>
            Returns a culture-independent string representation of the given <paramref name="exception"/> object,
            appropriate for diagnostics tracing.
            </summary>
            <param name="exception">Exception to convert to string.</param>
            <returns>Exception as string with no culture.</returns>
        </member>
        <member name="T:OpenTelemetry.Internal.Guard">
            <summary>
            Methods for guarding against exception throwing values.
            </summary>
        </member>
        <member name="M:OpenTelemetry.Internal.Guard.ThrowIfNull(System.Object,System.String)">
            <summary>
            Throw an exception if the value is null.
            </summary>
            <param name="value">The value to check.</param>
            <param name="paramName">The parameter name to use in the thrown exception.</param>
        </member>
        <member name="M:OpenTelemetry.Internal.Guard.ThrowIfNullOrEmpty(System.String,System.String)">
            <summary>
            Throw an exception if the value is null or empty.
            </summary>
            <param name="value">The value to check.</param>
            <param name="paramName">The parameter name to use in the thrown exception.</param>
        </member>
        <member name="M:OpenTelemetry.Internal.Guard.ThrowIfNullOrWhitespace(System.String,System.String)">
            <summary>
            Throw an exception if the value is null or whitespace.
            </summary>
            <param name="value">The value to check.</param>
            <param name="paramName">The parameter name to use in the thrown exception.</param>
        </member>
        <member name="M:OpenTelemetry.Internal.Guard.ThrowIfZero(System.Int32,System.String,System.String)">
            <summary>
            Throw an exception if the value is zero.
            </summary>
            <param name="value">The value to check.</param>
            <param name="message">The message to use in the thrown exception.</param>
            <param name="paramName">The parameter name to use in the thrown exception.</param>
        </member>
        <member name="M:OpenTelemetry.Internal.Guard.ThrowIfInvalidTimeout(System.Int32,System.String)">
            <summary>
            Throw an exception if the value is not considered a valid timeout.
            </summary>
            <param name="value">The value to check.</param>
            <param name="paramName">The parameter name to use in the thrown exception.</param>
        </member>
        <member name="M:OpenTelemetry.Internal.Guard.ThrowIfOutOfRange(System.Int32,System.String,System.Int32,System.Int32,System.String,System.String,System.String)">
            <summary>
            Throw an exception if the value is not within the given range.
            </summary>
            <param name="value">The value to check.</param>
            <param name="paramName">The parameter name to use in the thrown exception.</param>
            <param name="min">The inclusive lower bound.</param>
            <param name="max">The inclusive upper bound.</param>
            <param name="minName">The name of the lower bound.</param>
            <param name="maxName">The name of the upper bound.</param>
            <param name="message">An optional custom message to use in the thrown exception.</param>
        </member>
        <member name="M:OpenTelemetry.Internal.Guard.ThrowIfOutOfRange(System.Double,System.String,System.Double,System.Double,System.String,System.String,System.String)">
            <summary>
            Throw an exception if the value is not within the given range.
            </summary>
            <param name="value">The value to check.</param>
            <param name="paramName">The parameter name to use in the thrown exception.</param>
            <param name="min">The inclusive lower bound.</param>
            <param name="max">The inclusive upper bound.</param>
            <param name="minName">The name of the lower bound.</param>
            <param name="maxName">The name of the upper bound.</param>
            <param name="message">An optional custom message to use in the thrown exception.</param>
        </member>
        <member name="M:OpenTelemetry.Internal.Guard.ThrowIfNotOfType``1(System.Object,System.String)">
            <summary>
            Throw an exception if the value is not of the expected type.
            </summary>
            <param name="value">The value to check.</param>
            <param name="paramName">The parameter name to use in the thrown exception.</param>
            <typeparam name="T">The type attempted to convert to.</typeparam>
            <returns>The value casted to the specified type.</returns>
        </member>
        <member name="T:OpenTelemetry.Internal.OpenTelemetrySdkEventSource">
            <summary>
            EventSource implementation for OpenTelemetry SDK implementation.
            </summary>
        </member>
        <member name="T:OpenTelemetry.Proto.Collector.Logs.V1.LogsServiceReflection">
            <summary>Holder for reflection information generated from opentelemetry/proto/collector/logs/v1/logs_service.proto</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Collector.Logs.V1.LogsServiceReflection.Descriptor">
            <summary>File descriptor for opentelemetry/proto/collector/logs/v1/logs_service.proto</summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Collector.Logs.V1.ExportLogsServiceRequest.ResourceLogsFieldNumber">
            <summary>Field number for the "resource_logs" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Collector.Logs.V1.ExportLogsServiceRequest.ResourceLogs">
            <summary>
            An array of ResourceLogs.
            For data coming from a single resource this array will typically contain one
            element. Intermediary nodes (such as OpenTelemetry Collector) that receive
            data from multiple origins typically batch the data before forwarding further and
            in that case this array will contain multiple elements.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Collector.Logs.V1.ExportLogsServiceResponse.PartialSuccessFieldNumber">
            <summary>Field number for the "partial_success" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Collector.Logs.V1.ExportLogsServiceResponse.PartialSuccess">
             <summary>
             The details of a partially successful export request.
            
             If the request is only partially accepted
             (i.e. when the server accepts only parts of the data and rejects the rest)
             the server MUST initialize the `partial_success` field and MUST
             set the `rejected_&lt;signal>` with the number of items it rejected.
            
             Servers MAY also make use of the `partial_success` field to convey
             warnings/suggestions to senders even when the request was fully accepted.
             In such cases, the `rejected_&lt;signal>` MUST have a value of `0` and
             the `error_message` MUST be non-empty.
            
             A `partial_success` message with an empty value (rejected_&lt;signal> = 0 and
             `error_message` = "") is equivalent to it not being set/present. Senders
             SHOULD interpret it the same way as in the full success case.
             </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Collector.Logs.V1.ExportLogsPartialSuccess.RejectedLogRecordsFieldNumber">
            <summary>Field number for the "rejected_log_records" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Collector.Logs.V1.ExportLogsPartialSuccess.RejectedLogRecords">
             <summary>
             The number of rejected log records.
            
             A `rejected_&lt;signal>` field holding a `0` value indicates that the
             request was fully accepted.
             </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Collector.Logs.V1.ExportLogsPartialSuccess.ErrorMessageFieldNumber">
            <summary>Field number for the "error_message" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Collector.Logs.V1.ExportLogsPartialSuccess.ErrorMessage">
             <summary>
             A developer-facing human-readable message in English. It should be used
             either to explain why the server rejected parts of the data during a partial
             success or to convey warnings/suggestions during a full success. The message
             should offer guidance on how users can address such issues.
            
             error_message is an optional field. An error_message with an empty value
             is equivalent to it not being set.
             </summary>
        </member>
        <member name="T:OpenTelemetry.Proto.Collector.Logs.V1.LogsService">
            <summary>
            Service that can be used to push logs between one Application instrumented with
            OpenTelemetry and an collector, or between an collector and a central collector (in this
            case logs are sent/received to/from multiple Applications).
            </summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Collector.Logs.V1.LogsService.Descriptor">
            <summary>Service descriptor</summary>
        </member>
        <member name="T:OpenTelemetry.Proto.Collector.Logs.V1.LogsService.LogsServiceBase">
            <summary>Base class for server-side implementations of LogsService</summary>
        </member>
        <member name="M:OpenTelemetry.Proto.Collector.Logs.V1.LogsService.LogsServiceBase.Export(OpenTelemetry.Proto.Collector.Logs.V1.ExportLogsServiceRequest,Grpc.Core.ServerCallContext)">
            <summary>
            For performance reasons, it is recommended to keep this RPC
            alive for the entire life of the application.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="T:OpenTelemetry.Proto.Collector.Logs.V1.LogsService.LogsServiceClient">
            <summary>Client for LogsService</summary>
        </member>
        <member name="M:OpenTelemetry.Proto.Collector.Logs.V1.LogsService.LogsServiceClient.#ctor(Grpc.Core.ChannelBase)">
            <summary>Creates a new client for LogsService</summary>
            <param name="channel">The channel to use to make remote calls.</param>
        </member>
        <member name="M:OpenTelemetry.Proto.Collector.Logs.V1.LogsService.LogsServiceClient.#ctor(Grpc.Core.CallInvoker)">
            <summary>Creates a new client for LogsService that uses a custom <c>CallInvoker</c>.</summary>
            <param name="callInvoker">The callInvoker to use to make remote calls.</param>
        </member>
        <member name="M:OpenTelemetry.Proto.Collector.Logs.V1.LogsService.LogsServiceClient.#ctor">
            <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
        </member>
        <member name="M:OpenTelemetry.Proto.Collector.Logs.V1.LogsService.LogsServiceClient.#ctor(Grpc.Core.ClientBase.ClientBaseConfiguration)">
            <summary>Protected constructor to allow creation of configured clients.</summary>
            <param name="configuration">The client configuration.</param>
        </member>
        <member name="M:OpenTelemetry.Proto.Collector.Logs.V1.LogsService.LogsServiceClient.Export(OpenTelemetry.Proto.Collector.Logs.V1.ExportLogsServiceRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            For performance reasons, it is recommended to keep this RPC
            alive for the entire life of the application.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:OpenTelemetry.Proto.Collector.Logs.V1.LogsService.LogsServiceClient.Export(OpenTelemetry.Proto.Collector.Logs.V1.ExportLogsServiceRequest,Grpc.Core.CallOptions)">
            <summary>
            For performance reasons, it is recommended to keep this RPC
            alive for the entire life of the application.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:OpenTelemetry.Proto.Collector.Logs.V1.LogsService.LogsServiceClient.ExportAsync(OpenTelemetry.Proto.Collector.Logs.V1.ExportLogsServiceRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            For performance reasons, it is recommended to keep this RPC
            alive for the entire life of the application.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:OpenTelemetry.Proto.Collector.Logs.V1.LogsService.LogsServiceClient.ExportAsync(OpenTelemetry.Proto.Collector.Logs.V1.ExportLogsServiceRequest,Grpc.Core.CallOptions)">
            <summary>
            For performance reasons, it is recommended to keep this RPC
            alive for the entire life of the application.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:OpenTelemetry.Proto.Collector.Logs.V1.LogsService.LogsServiceClient.NewInstance(Grpc.Core.ClientBase.ClientBaseConfiguration)">
            <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
        </member>
        <member name="M:OpenTelemetry.Proto.Collector.Logs.V1.LogsService.BindService(OpenTelemetry.Proto.Collector.Logs.V1.LogsService.LogsServiceBase)">
            <summary>Creates service definition that can be registered with a server</summary>
            <param name="serviceImpl">An object implementing the server-side handling logic.</param>
        </member>
        <member name="M:OpenTelemetry.Proto.Collector.Logs.V1.LogsService.BindService(Grpc.Core.ServiceBinderBase,OpenTelemetry.Proto.Collector.Logs.V1.LogsService.LogsServiceBase)">
            <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
            Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
            <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
            <param name="serviceImpl">An object implementing the server-side handling logic.</param>
        </member>
        <member name="T:OpenTelemetry.Proto.Collector.Metrics.V1.MetricsServiceReflection">
            <summary>Holder for reflection information generated from opentelemetry/proto/collector/metrics/v1/metrics_service.proto</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Collector.Metrics.V1.MetricsServiceReflection.Descriptor">
            <summary>File descriptor for opentelemetry/proto/collector/metrics/v1/metrics_service.proto</summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Collector.Metrics.V1.ExportMetricsServiceRequest.ResourceMetricsFieldNumber">
            <summary>Field number for the "resource_metrics" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Collector.Metrics.V1.ExportMetricsServiceRequest.ResourceMetrics">
            <summary>
            An array of ResourceMetrics.
            For data coming from a single resource this array will typically contain one
            element. Intermediary nodes (such as OpenTelemetry Collector) that receive
            data from multiple origins typically batch the data before forwarding further and
            in that case this array will contain multiple elements.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Collector.Metrics.V1.ExportMetricsServiceResponse.PartialSuccessFieldNumber">
            <summary>Field number for the "partial_success" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Collector.Metrics.V1.ExportMetricsServiceResponse.PartialSuccess">
             <summary>
             The details of a partially successful export request.
            
             If the request is only partially accepted
             (i.e. when the server accepts only parts of the data and rejects the rest)
             the server MUST initialize the `partial_success` field and MUST
             set the `rejected_&lt;signal>` with the number of items it rejected.
            
             Servers MAY also make use of the `partial_success` field to convey
             warnings/suggestions to senders even when the request was fully accepted.
             In such cases, the `rejected_&lt;signal>` MUST have a value of `0` and
             the `error_message` MUST be non-empty.
            
             A `partial_success` message with an empty value (rejected_&lt;signal> = 0 and
             `error_message` = "") is equivalent to it not being set/present. Senders
             SHOULD interpret it the same way as in the full success case.
             </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Collector.Metrics.V1.ExportMetricsPartialSuccess.RejectedDataPointsFieldNumber">
            <summary>Field number for the "rejected_data_points" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Collector.Metrics.V1.ExportMetricsPartialSuccess.RejectedDataPoints">
             <summary>
             The number of rejected data points.
            
             A `rejected_&lt;signal>` field holding a `0` value indicates that the
             request was fully accepted.
             </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Collector.Metrics.V1.ExportMetricsPartialSuccess.ErrorMessageFieldNumber">
            <summary>Field number for the "error_message" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Collector.Metrics.V1.ExportMetricsPartialSuccess.ErrorMessage">
             <summary>
             A developer-facing human-readable message in English. It should be used
             either to explain why the server rejected parts of the data during a partial
             success or to convey warnings/suggestions during a full success. The message
             should offer guidance on how users can address such issues.
            
             error_message is an optional field. An error_message with an empty value
             is equivalent to it not being set.
             </summary>
        </member>
        <member name="T:OpenTelemetry.Proto.Collector.Metrics.V1.MetricsService">
            <summary>
            Service that can be used to push metrics between one Application
            instrumented with OpenTelemetry and a collector, or between a collector and a
            central collector.
            </summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Collector.Metrics.V1.MetricsService.Descriptor">
            <summary>Service descriptor</summary>
        </member>
        <member name="T:OpenTelemetry.Proto.Collector.Metrics.V1.MetricsService.MetricsServiceBase">
            <summary>Base class for server-side implementations of MetricsService</summary>
        </member>
        <member name="M:OpenTelemetry.Proto.Collector.Metrics.V1.MetricsService.MetricsServiceBase.Export(OpenTelemetry.Proto.Collector.Metrics.V1.ExportMetricsServiceRequest,Grpc.Core.ServerCallContext)">
            <summary>
            For performance reasons, it is recommended to keep this RPC
            alive for the entire life of the application.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="T:OpenTelemetry.Proto.Collector.Metrics.V1.MetricsService.MetricsServiceClient">
            <summary>Client for MetricsService</summary>
        </member>
        <member name="M:OpenTelemetry.Proto.Collector.Metrics.V1.MetricsService.MetricsServiceClient.#ctor(Grpc.Core.ChannelBase)">
            <summary>Creates a new client for MetricsService</summary>
            <param name="channel">The channel to use to make remote calls.</param>
        </member>
        <member name="M:OpenTelemetry.Proto.Collector.Metrics.V1.MetricsService.MetricsServiceClient.#ctor(Grpc.Core.CallInvoker)">
            <summary>Creates a new client for MetricsService that uses a custom <c>CallInvoker</c>.</summary>
            <param name="callInvoker">The callInvoker to use to make remote calls.</param>
        </member>
        <member name="M:OpenTelemetry.Proto.Collector.Metrics.V1.MetricsService.MetricsServiceClient.#ctor">
            <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
        </member>
        <member name="M:OpenTelemetry.Proto.Collector.Metrics.V1.MetricsService.MetricsServiceClient.#ctor(Grpc.Core.ClientBase.ClientBaseConfiguration)">
            <summary>Protected constructor to allow creation of configured clients.</summary>
            <param name="configuration">The client configuration.</param>
        </member>
        <member name="M:OpenTelemetry.Proto.Collector.Metrics.V1.MetricsService.MetricsServiceClient.Export(OpenTelemetry.Proto.Collector.Metrics.V1.ExportMetricsServiceRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            For performance reasons, it is recommended to keep this RPC
            alive for the entire life of the application.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:OpenTelemetry.Proto.Collector.Metrics.V1.MetricsService.MetricsServiceClient.Export(OpenTelemetry.Proto.Collector.Metrics.V1.ExportMetricsServiceRequest,Grpc.Core.CallOptions)">
            <summary>
            For performance reasons, it is recommended to keep this RPC
            alive for the entire life of the application.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:OpenTelemetry.Proto.Collector.Metrics.V1.MetricsService.MetricsServiceClient.ExportAsync(OpenTelemetry.Proto.Collector.Metrics.V1.ExportMetricsServiceRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            For performance reasons, it is recommended to keep this RPC
            alive for the entire life of the application.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:OpenTelemetry.Proto.Collector.Metrics.V1.MetricsService.MetricsServiceClient.ExportAsync(OpenTelemetry.Proto.Collector.Metrics.V1.ExportMetricsServiceRequest,Grpc.Core.CallOptions)">
            <summary>
            For performance reasons, it is recommended to keep this RPC
            alive for the entire life of the application.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:OpenTelemetry.Proto.Collector.Metrics.V1.MetricsService.MetricsServiceClient.NewInstance(Grpc.Core.ClientBase.ClientBaseConfiguration)">
            <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
        </member>
        <member name="M:OpenTelemetry.Proto.Collector.Metrics.V1.MetricsService.BindService(OpenTelemetry.Proto.Collector.Metrics.V1.MetricsService.MetricsServiceBase)">
            <summary>Creates service definition that can be registered with a server</summary>
            <param name="serviceImpl">An object implementing the server-side handling logic.</param>
        </member>
        <member name="M:OpenTelemetry.Proto.Collector.Metrics.V1.MetricsService.BindService(Grpc.Core.ServiceBinderBase,OpenTelemetry.Proto.Collector.Metrics.V1.MetricsService.MetricsServiceBase)">
            <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
            Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
            <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
            <param name="serviceImpl">An object implementing the server-side handling logic.</param>
        </member>
        <member name="T:OpenTelemetry.Proto.Collector.Trace.V1.TraceServiceReflection">
            <summary>Holder for reflection information generated from opentelemetry/proto/collector/trace/v1/trace_service.proto</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Collector.Trace.V1.TraceServiceReflection.Descriptor">
            <summary>File descriptor for opentelemetry/proto/collector/trace/v1/trace_service.proto</summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Collector.Trace.V1.ExportTraceServiceRequest.ResourceSpansFieldNumber">
            <summary>Field number for the "resource_spans" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Collector.Trace.V1.ExportTraceServiceRequest.ResourceSpans">
            <summary>
            An array of ResourceSpans.
            For data coming from a single resource this array will typically contain one
            element. Intermediary nodes (such as OpenTelemetry Collector) that receive
            data from multiple origins typically batch the data before forwarding further and
            in that case this array will contain multiple elements.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Collector.Trace.V1.ExportTraceServiceResponse.PartialSuccessFieldNumber">
            <summary>Field number for the "partial_success" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Collector.Trace.V1.ExportTraceServiceResponse.PartialSuccess">
             <summary>
             The details of a partially successful export request.
            
             If the request is only partially accepted
             (i.e. when the server accepts only parts of the data and rejects the rest)
             the server MUST initialize the `partial_success` field and MUST
             set the `rejected_&lt;signal>` with the number of items it rejected.
            
             Servers MAY also make use of the `partial_success` field to convey
             warnings/suggestions to senders even when the request was fully accepted.
             In such cases, the `rejected_&lt;signal>` MUST have a value of `0` and
             the `error_message` MUST be non-empty.
            
             A `partial_success` message with an empty value (rejected_&lt;signal> = 0 and
             `error_message` = "") is equivalent to it not being set/present. Senders
             SHOULD interpret it the same way as in the full success case.
             </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Collector.Trace.V1.ExportTracePartialSuccess.RejectedSpansFieldNumber">
            <summary>Field number for the "rejected_spans" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Collector.Trace.V1.ExportTracePartialSuccess.RejectedSpans">
             <summary>
             The number of rejected spans.
            
             A `rejected_&lt;signal>` field holding a `0` value indicates that the
             request was fully accepted.
             </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Collector.Trace.V1.ExportTracePartialSuccess.ErrorMessageFieldNumber">
            <summary>Field number for the "error_message" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Collector.Trace.V1.ExportTracePartialSuccess.ErrorMessage">
             <summary>
             A developer-facing human-readable message in English. It should be used
             either to explain why the server rejected parts of the data during a partial
             success or to convey warnings/suggestions during a full success. The message
             should offer guidance on how users can address such issues.
            
             error_message is an optional field. An error_message with an empty value
             is equivalent to it not being set.
             </summary>
        </member>
        <member name="T:OpenTelemetry.Proto.Collector.Trace.V1.TraceService">
            <summary>
            Service that can be used to push spans between one Application instrumented with
            OpenTelemetry and a collector, or between a collector and a central collector (in this
            case spans are sent/received to/from multiple Applications).
            </summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Collector.Trace.V1.TraceService.Descriptor">
            <summary>Service descriptor</summary>
        </member>
        <member name="T:OpenTelemetry.Proto.Collector.Trace.V1.TraceService.TraceServiceBase">
            <summary>Base class for server-side implementations of TraceService</summary>
        </member>
        <member name="M:OpenTelemetry.Proto.Collector.Trace.V1.TraceService.TraceServiceBase.Export(OpenTelemetry.Proto.Collector.Trace.V1.ExportTraceServiceRequest,Grpc.Core.ServerCallContext)">
            <summary>
            For performance reasons, it is recommended to keep this RPC
            alive for the entire life of the application.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="T:OpenTelemetry.Proto.Collector.Trace.V1.TraceService.TraceServiceClient">
            <summary>Client for TraceService</summary>
        </member>
        <member name="M:OpenTelemetry.Proto.Collector.Trace.V1.TraceService.TraceServiceClient.#ctor(Grpc.Core.ChannelBase)">
            <summary>Creates a new client for TraceService</summary>
            <param name="channel">The channel to use to make remote calls.</param>
        </member>
        <member name="M:OpenTelemetry.Proto.Collector.Trace.V1.TraceService.TraceServiceClient.#ctor(Grpc.Core.CallInvoker)">
            <summary>Creates a new client for TraceService that uses a custom <c>CallInvoker</c>.</summary>
            <param name="callInvoker">The callInvoker to use to make remote calls.</param>
        </member>
        <member name="M:OpenTelemetry.Proto.Collector.Trace.V1.TraceService.TraceServiceClient.#ctor">
            <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
        </member>
        <member name="M:OpenTelemetry.Proto.Collector.Trace.V1.TraceService.TraceServiceClient.#ctor(Grpc.Core.ClientBase.ClientBaseConfiguration)">
            <summary>Protected constructor to allow creation of configured clients.</summary>
            <param name="configuration">The client configuration.</param>
        </member>
        <member name="M:OpenTelemetry.Proto.Collector.Trace.V1.TraceService.TraceServiceClient.Export(OpenTelemetry.Proto.Collector.Trace.V1.ExportTraceServiceRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            For performance reasons, it is recommended to keep this RPC
            alive for the entire life of the application.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:OpenTelemetry.Proto.Collector.Trace.V1.TraceService.TraceServiceClient.Export(OpenTelemetry.Proto.Collector.Trace.V1.ExportTraceServiceRequest,Grpc.Core.CallOptions)">
            <summary>
            For performance reasons, it is recommended to keep this RPC
            alive for the entire life of the application.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:OpenTelemetry.Proto.Collector.Trace.V1.TraceService.TraceServiceClient.ExportAsync(OpenTelemetry.Proto.Collector.Trace.V1.ExportTraceServiceRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            For performance reasons, it is recommended to keep this RPC
            alive for the entire life of the application.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:OpenTelemetry.Proto.Collector.Trace.V1.TraceService.TraceServiceClient.ExportAsync(OpenTelemetry.Proto.Collector.Trace.V1.ExportTraceServiceRequest,Grpc.Core.CallOptions)">
            <summary>
            For performance reasons, it is recommended to keep this RPC
            alive for the entire life of the application.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:OpenTelemetry.Proto.Collector.Trace.V1.TraceService.TraceServiceClient.NewInstance(Grpc.Core.ClientBase.ClientBaseConfiguration)">
            <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
        </member>
        <member name="M:OpenTelemetry.Proto.Collector.Trace.V1.TraceService.BindService(OpenTelemetry.Proto.Collector.Trace.V1.TraceService.TraceServiceBase)">
            <summary>Creates service definition that can be registered with a server</summary>
            <param name="serviceImpl">An object implementing the server-side handling logic.</param>
        </member>
        <member name="M:OpenTelemetry.Proto.Collector.Trace.V1.TraceService.BindService(Grpc.Core.ServiceBinderBase,OpenTelemetry.Proto.Collector.Trace.V1.TraceService.TraceServiceBase)">
            <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
            Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
            <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
            <param name="serviceImpl">An object implementing the server-side handling logic.</param>
        </member>
        <member name="T:OpenTelemetry.Proto.Common.V1.CommonReflection">
            <summary>Holder for reflection information generated from opentelemetry/proto/common/v1/common.proto</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Common.V1.CommonReflection.Descriptor">
            <summary>File descriptor for opentelemetry/proto/common/v1/common.proto</summary>
        </member>
        <member name="T:OpenTelemetry.Proto.Common.V1.AnyValue">
            <summary>
            AnyValue is used to represent any type of attribute value. AnyValue may contain a
            primitive value such as a string or integer or it may contain an arbitrary nested
            object containing arrays, key-value lists and primitives.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Common.V1.AnyValue.StringValueFieldNumber">
            <summary>Field number for the "string_value" field.</summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Common.V1.AnyValue.BoolValueFieldNumber">
            <summary>Field number for the "bool_value" field.</summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Common.V1.AnyValue.IntValueFieldNumber">
            <summary>Field number for the "int_value" field.</summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Common.V1.AnyValue.DoubleValueFieldNumber">
            <summary>Field number for the "double_value" field.</summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Common.V1.AnyValue.ArrayValueFieldNumber">
            <summary>Field number for the "array_value" field.</summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Common.V1.AnyValue.KvlistValueFieldNumber">
            <summary>Field number for the "kvlist_value" field.</summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Common.V1.AnyValue.BytesValueFieldNumber">
            <summary>Field number for the "bytes_value" field.</summary>
        </member>
        <member name="T:OpenTelemetry.Proto.Common.V1.AnyValue.ValueOneofCase">
            <summary>Enum of possible cases for the "value" oneof.</summary>
        </member>
        <member name="T:OpenTelemetry.Proto.Common.V1.ArrayValue">
            <summary>
            ArrayValue is a list of AnyValue messages. We need ArrayValue as a message
            since oneof in AnyValue does not allow repeated fields.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Common.V1.ArrayValue.ValuesFieldNumber">
            <summary>Field number for the "values" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Common.V1.ArrayValue.Values">
            <summary>
            Array of values. The array may be empty (contain 0 elements).
            </summary>
        </member>
        <member name="T:OpenTelemetry.Proto.Common.V1.KeyValueList">
            <summary>
            KeyValueList is a list of KeyValue messages. We need KeyValueList as a message
            since `oneof` in AnyValue does not allow repeated fields. Everywhere else where we need
            a list of KeyValue messages (e.g. in Span) we use `repeated KeyValue` directly to
            avoid unnecessary extra wrapping (which slows down the protocol). The 2 approaches
            are semantically equivalent.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Common.V1.KeyValueList.ValuesFieldNumber">
            <summary>Field number for the "values" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Common.V1.KeyValueList.Values">
            <summary>
            A collection of key/value pairs of key-value pairs. The list may be empty (may
            contain 0 elements).
            The keys MUST be unique (it is not allowed to have more than one
            value with the same key).
            </summary>
        </member>
        <member name="T:OpenTelemetry.Proto.Common.V1.KeyValue">
            <summary>
            KeyValue is a key-value pair that is used to store Span attributes, Link
            attributes, etc.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Common.V1.KeyValue.KeyFieldNumber">
            <summary>Field number for the "key" field.</summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Common.V1.KeyValue.ValueFieldNumber">
            <summary>Field number for the "value" field.</summary>
        </member>
        <member name="T:OpenTelemetry.Proto.Common.V1.InstrumentationScope">
            <summary>
            InstrumentationScope is a message representing the instrumentation scope information
            such as the fully qualified name and version. 
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Common.V1.InstrumentationScope.NameFieldNumber">
            <summary>Field number for the "name" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Common.V1.InstrumentationScope.Name">
            <summary>
            An empty instrumentation scope name means the name is unknown.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Common.V1.InstrumentationScope.VersionFieldNumber">
            <summary>Field number for the "version" field.</summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Common.V1.InstrumentationScope.AttributesFieldNumber">
            <summary>Field number for the "attributes" field.</summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Common.V1.InstrumentationScope.DroppedAttributesCountFieldNumber">
            <summary>Field number for the "dropped_attributes_count" field.</summary>
        </member>
        <member name="T:OpenTelemetry.Proto.Logs.V1.LogsReflection">
            <summary>Holder for reflection information generated from opentelemetry/proto/logs/v1/logs.proto</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Logs.V1.LogsReflection.Descriptor">
            <summary>File descriptor for opentelemetry/proto/logs/v1/logs.proto</summary>
        </member>
        <member name="T:OpenTelemetry.Proto.Logs.V1.SeverityNumber">
            <summary>
            Possible values for LogRecord.SeverityNumber.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Logs.V1.SeverityNumber.Unspecified">
            <summary>
            UNSPECIFIED is the default SeverityNumber, it MUST NOT be used.
            </summary>
        </member>
        <member name="T:OpenTelemetry.Proto.Logs.V1.LogRecordFlags">
            <summary>
            Masks for LogRecord.flags field.
            </summary>
        </member>
        <member name="T:OpenTelemetry.Proto.Logs.V1.LogsData">
             <summary>
             LogsData represents the logs data that can be stored in a persistent storage,
             OR can be embedded by other protocols that transfer OTLP logs data but do not
             implement the OTLP protocol.
            
             The main difference between this message and collector protocol is that
             in this message there will not be any "control" or "metadata" specific to
             OTLP protocol.
            
             When new fields are added into this message, the OTLP request MUST be updated
             as well.
             </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Logs.V1.LogsData.ResourceLogsFieldNumber">
            <summary>Field number for the "resource_logs" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Logs.V1.LogsData.ResourceLogs">
            <summary>
            An array of ResourceLogs.
            For data coming from a single resource this array will typically contain
            one element. Intermediary nodes that receive data from multiple origins
            typically batch the data before forwarding further and in that case this
            array will contain multiple elements.
            </summary>
        </member>
        <member name="T:OpenTelemetry.Proto.Logs.V1.ResourceLogs">
            <summary>
            A collection of ScopeLogs from a Resource.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Logs.V1.ResourceLogs.ResourceFieldNumber">
            <summary>Field number for the "resource" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Logs.V1.ResourceLogs.Resource">
            <summary>
            The resource for the logs in this message.
            If this field is not set then resource info is unknown.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Logs.V1.ResourceLogs.ScopeLogsFieldNumber">
            <summary>Field number for the "scope_logs" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Logs.V1.ResourceLogs.ScopeLogs">
            <summary>
            A list of ScopeLogs that originate from a resource.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Logs.V1.ResourceLogs.SchemaUrlFieldNumber">
            <summary>Field number for the "schema_url" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Logs.V1.ResourceLogs.SchemaUrl">
            <summary>
            This schema_url applies to the data in the "resource" field. It does not apply
            to the data in the "scope_logs" field which have their own schema_url field.
            </summary>
        </member>
        <member name="T:OpenTelemetry.Proto.Logs.V1.ScopeLogs">
            <summary>
            A collection of Logs produced by a Scope.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Logs.V1.ScopeLogs.ScopeFieldNumber">
            <summary>Field number for the "scope" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Logs.V1.ScopeLogs.Scope">
            <summary>
            The instrumentation scope information for the logs in this message.
            Semantically when InstrumentationScope isn't set, it is equivalent with
            an empty instrumentation scope name (unknown).
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Logs.V1.ScopeLogs.LogRecordsFieldNumber">
            <summary>Field number for the "log_records" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Logs.V1.ScopeLogs.LogRecords">
            <summary>
            A list of log records.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Logs.V1.ScopeLogs.SchemaUrlFieldNumber">
            <summary>Field number for the "schema_url" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Logs.V1.ScopeLogs.SchemaUrl">
            <summary>
            This schema_url applies to all logs in the "logs" field.
            </summary>
        </member>
        <member name="T:OpenTelemetry.Proto.Logs.V1.LogRecord">
            <summary>
            A log record according to OpenTelemetry Log Data Model:
            https://github.com/open-telemetry/oteps/blob/main/text/logs/0097-log-data-model.md
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Logs.V1.LogRecord.TimeUnixNanoFieldNumber">
            <summary>Field number for the "time_unix_nano" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Logs.V1.LogRecord.TimeUnixNano">
            <summary>
            time_unix_nano is the time when the event occurred.
            Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.
            Value of 0 indicates unknown or missing timestamp.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Logs.V1.LogRecord.ObservedTimeUnixNanoFieldNumber">
            <summary>Field number for the "observed_time_unix_nano" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Logs.V1.LogRecord.ObservedTimeUnixNano">
             <summary>
             Time when the event was observed by the collection system.
             For events that originate in OpenTelemetry (e.g. using OpenTelemetry Logging SDK)
             this timestamp is typically set at the generation time and is equal to Timestamp.
             For events originating externally and collected by OpenTelemetry (e.g. using
             Collector) this is the time when OpenTelemetry's code observed the event measured
             by the clock of the OpenTelemetry code. This field MUST be set once the event is
             observed by OpenTelemetry.
            
             For converting OpenTelemetry log data to formats that support only one timestamp or
             when receiving OpenTelemetry log data by recipients that support only one timestamp
             internally the following logic is recommended:
               - Use time_unix_nano if it is present, otherwise use observed_time_unix_nano.
            
             Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.
             Value of 0 indicates unknown or missing timestamp.
             </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Logs.V1.LogRecord.SeverityNumberFieldNumber">
            <summary>Field number for the "severity_number" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Logs.V1.LogRecord.SeverityNumber">
            <summary>
            Numerical value of the severity, normalized to values described in Log Data Model.
            [Optional].
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Logs.V1.LogRecord.SeverityTextFieldNumber">
            <summary>Field number for the "severity_text" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Logs.V1.LogRecord.SeverityText">
            <summary>
            The severity text (also known as log level). The original string representation as
            it is known at the source. [Optional].
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Logs.V1.LogRecord.BodyFieldNumber">
            <summary>Field number for the "body" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Logs.V1.LogRecord.Body">
            <summary>
            A value containing the body of the log record. Can be for example a human-readable
            string message (including multi-line) describing the event in a free form or it can
            be a structured data composed of arrays and maps of other values. [Optional].
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Logs.V1.LogRecord.AttributesFieldNumber">
            <summary>Field number for the "attributes" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Logs.V1.LogRecord.Attributes">
            <summary>
            Additional attributes that describe the specific event occurrence. [Optional].
            Attribute keys MUST be unique (it is not allowed to have more than one
            attribute with the same key).
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Logs.V1.LogRecord.DroppedAttributesCountFieldNumber">
            <summary>Field number for the "dropped_attributes_count" field.</summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Logs.V1.LogRecord.FlagsFieldNumber">
            <summary>Field number for the "flags" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Logs.V1.LogRecord.Flags">
            <summary>
            Flags, a bit field. 8 least significant bits are the trace flags as
            defined in W3C Trace Context specification. 24 most significant bits are reserved
            and must be set to 0. Readers must not assume that 24 most significant bits
            will be zero and must correctly mask the bits when reading 8-bit trace flag (use
            flags &amp; TRACE_FLAGS_MASK). [Optional].
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Logs.V1.LogRecord.TraceIdFieldNumber">
            <summary>Field number for the "trace_id" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Logs.V1.LogRecord.TraceId">
            <summary>
            A unique identifier for a trace. All logs from the same trace share
            the same `trace_id`. The ID is a 16-byte array. An ID with all zeroes
            is considered invalid. Can be set for logs that are part of request processing
            and have an assigned trace id. [Optional].
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Logs.V1.LogRecord.SpanIdFieldNumber">
            <summary>Field number for the "span_id" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Logs.V1.LogRecord.SpanId">
            <summary>
            A unique identifier for a span within a trace, assigned when the span
            is created. The ID is an 8-byte array. An ID with all zeroes is considered
            invalid. Can be set for logs that are part of a particular processing span.
            If span_id is present trace_id SHOULD be also present. [Optional].
            </summary>
        </member>
        <member name="T:OpenTelemetry.Proto.Metrics.V1.MetricsReflection">
            <summary>Holder for reflection information generated from opentelemetry/proto/metrics/v1/metrics.proto</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Metrics.V1.MetricsReflection.Descriptor">
            <summary>File descriptor for opentelemetry/proto/metrics/v1/metrics.proto</summary>
        </member>
        <member name="T:OpenTelemetry.Proto.Metrics.V1.AggregationTemporality">
            <summary>
            AggregationTemporality defines how a metric aggregator reports aggregated
            values. It describes how those values relate to the time interval over
            which they are aggregated.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Metrics.V1.AggregationTemporality.Unspecified">
            <summary>
            UNSPECIFIED is the default AggregationTemporality, it MUST not be used.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Metrics.V1.AggregationTemporality.Delta">
             <summary>
             DELTA is an AggregationTemporality for a metric aggregator which reports
             changes since last report time. Successive metrics contain aggregation of
             values from continuous and non-overlapping intervals.
            
             The values for a DELTA metric are based only on the time interval
             associated with one measurement cycle. There is no dependency on
             previous measurements like is the case for CUMULATIVE metrics.
            
             For example, consider a system measuring the number of requests that
             it receives and reports the sum of these requests every second as a
             DELTA metric:
            
               1. The system starts receiving at time=t_0.
               2. A request is received, the system measures 1 request.
               3. A request is received, the system measures 1 request.
               4. A request is received, the system measures 1 request.
               5. The 1 second collection cycle ends. A metric is exported for the
                  number of requests received over the interval of time t_0 to
                  t_0+1 with a value of 3.
               6. A request is received, the system measures 1 request.
               7. A request is received, the system measures 1 request.
               8. The 1 second collection cycle ends. A metric is exported for the
                  number of requests received over the interval of time t_0+1 to
                  t_0+2 with a value of 2.
             </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Metrics.V1.AggregationTemporality.Cumulative">
             <summary>
             CUMULATIVE is an AggregationTemporality for a metric aggregator which
             reports changes since a fixed start time. This means that current values
             of a CUMULATIVE metric depend on all previous measurements since the
             start time. Because of this, the sender is required to retain this state
             in some form. If this state is lost or invalidated, the CUMULATIVE metric
             values MUST be reset and a new fixed start time following the last
             reported measurement time sent MUST be used.
            
             For example, consider a system measuring the number of requests that
             it receives and reports the sum of these requests every second as a
             CUMULATIVE metric:
            
               1. The system starts receiving at time=t_0.
               2. A request is received, the system measures 1 request.
               3. A request is received, the system measures 1 request.
               4. A request is received, the system measures 1 request.
               5. The 1 second collection cycle ends. A metric is exported for the
                  number of requests received over the interval of time t_0 to
                  t_0+1 with a value of 3.
               6. A request is received, the system measures 1 request.
               7. A request is received, the system measures 1 request.
               8. The 1 second collection cycle ends. A metric is exported for the
                  number of requests received over the interval of time t_0 to
                  t_0+2 with a value of 5.
               9. The system experiences a fault and loses state.
               10. The system recovers and resumes receiving at time=t_1.
               11. A request is received, the system measures 1 request.
               12. The 1 second collection cycle ends. A metric is exported for the
                  number of requests received over the interval of time t_1 to
                  t_0+1 with a value of 1.
            
             Note: Even though, when reporting changes since last report time, using
             CUMULATIVE is valid, it is not recommended. This may cause problems for
             systems that do not use start_time to determine when the aggregation
             value was reset (e.g. Prometheus).
             </summary>
        </member>
        <member name="T:OpenTelemetry.Proto.Metrics.V1.DataPointFlags">
             <summary>
             DataPointFlags is defined as a protobuf 'uint32' type and is to be used as a
             bit-field representing 32 distinct boolean flags.  Each flag defined in this
             enum is a bit-mask.  To test the presence of a single flag in the flags of
             a data point, for example, use an expression like:
            
               (point.flags &amp; FLAG_NO_RECORDED_VALUE) == FLAG_NO_RECORDED_VALUE
             </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Metrics.V1.DataPointFlags.FlagNoRecordedValue">
            <summary>
            This DataPoint is valid but has no recorded value.  This value
            SHOULD be used to reflect explicitly missing data in a series, as
            for an equivalent to the Prometheus "staleness marker".
            </summary>
        </member>
        <member name="T:OpenTelemetry.Proto.Metrics.V1.MetricsData">
             <summary>
             MetricsData represents the metrics data that can be stored in a persistent
             storage, OR can be embedded by other protocols that transfer OTLP metrics
             data but do not implement the OTLP protocol.
            
             The main difference between this message and collector protocol is that
             in this message there will not be any "control" or "metadata" specific to
             OTLP protocol.
            
             When new fields are added into this message, the OTLP request MUST be updated
             as well.
             </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Metrics.V1.MetricsData.ResourceMetricsFieldNumber">
            <summary>Field number for the "resource_metrics" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Metrics.V1.MetricsData.ResourceMetrics">
            <summary>
            An array of ResourceMetrics.
            For data coming from a single resource this array will typically contain
            one element. Intermediary nodes that receive data from multiple origins
            typically batch the data before forwarding further and in that case this
            array will contain multiple elements.
            </summary>
        </member>
        <member name="T:OpenTelemetry.Proto.Metrics.V1.ResourceMetrics">
            <summary>
            A collection of ScopeMetrics from a Resource.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Metrics.V1.ResourceMetrics.ResourceFieldNumber">
            <summary>Field number for the "resource" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Metrics.V1.ResourceMetrics.Resource">
            <summary>
            The resource for the metrics in this message.
            If this field is not set then no resource info is known.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Metrics.V1.ResourceMetrics.ScopeMetricsFieldNumber">
            <summary>Field number for the "scope_metrics" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Metrics.V1.ResourceMetrics.ScopeMetrics">
            <summary>
            A list of metrics that originate from a resource.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Metrics.V1.ResourceMetrics.SchemaUrlFieldNumber">
            <summary>Field number for the "schema_url" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Metrics.V1.ResourceMetrics.SchemaUrl">
            <summary>
            This schema_url applies to the data in the "resource" field. It does not apply
            to the data in the "scope_metrics" field which have their own schema_url field.
            </summary>
        </member>
        <member name="T:OpenTelemetry.Proto.Metrics.V1.ScopeMetrics">
            <summary>
            A collection of Metrics produced by an Scope.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Metrics.V1.ScopeMetrics.ScopeFieldNumber">
            <summary>Field number for the "scope" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Metrics.V1.ScopeMetrics.Scope">
            <summary>
            The instrumentation scope information for the metrics in this message.
            Semantically when InstrumentationScope isn't set, it is equivalent with
            an empty instrumentation scope name (unknown).
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Metrics.V1.ScopeMetrics.MetricsFieldNumber">
            <summary>Field number for the "metrics" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Metrics.V1.ScopeMetrics.Metrics">
            <summary>
            A list of metrics that originate from an instrumentation library.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Metrics.V1.ScopeMetrics.SchemaUrlFieldNumber">
            <summary>Field number for the "schema_url" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Metrics.V1.ScopeMetrics.SchemaUrl">
            <summary>
            This schema_url applies to all metrics in the "metrics" field.
            </summary>
        </member>
        <member name="T:OpenTelemetry.Proto.Metrics.V1.Metric">
             <summary>
             Defines a Metric which has one or more timeseries.  The following is a
             brief summary of the Metric data model.  For more details, see:
            
               https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/metrics/data-model.md
            
             The data model and relation between entities is shown in the
             diagram below. Here, "DataPoint" is the term used to refer to any
             one of the specific data point value types, and "points" is the term used
             to refer to any one of the lists of points contained in the Metric.
            
             - Metric is composed of a metadata and data.
             - Metadata part contains a name, description, unit.
             - Data is one of the possible types (Sum, Gauge, Histogram, Summary).
             - DataPoint contains timestamps, attributes, and one of the possible value type
               fields.
            
                 Metric
              +------------+
              |name        |
              |description |
              |unit        |     +------------------------------------+
              |data        |---> |Gauge, Sum, Histogram, Summary, ... |
              +------------+     +------------------------------------+
            
                Data [One of Gauge, Sum, Histogram, Summary, ...]
              +-----------+
              |...        |  // Metadata about the Data.
              |points     |--+
              +-----------+  |
                             |      +---------------------------+
                             |      |DataPoint 1                |
                             v      |+------+------+   +------+ |
                          +-----+   ||label |label |...|label | |
                          |  1  |-->||value1|value2|...|valueN| |
                          +-----+   |+------+------+   +------+ |
                          |  .  |   |+-----+                    |
                          |  .  |   ||value|                    |
                          |  .  |   |+-----+                    |
                          |  .  |   +---------------------------+
                          |  .  |                   .
                          |  .  |                   .
                          |  .  |                   .
                          |  .  |   +---------------------------+
                          |  .  |   |DataPoint M                |
                          +-----+   |+------+------+   +------+ |
                          |  M  |-->||label |label |...|label | |
                          +-----+   ||value1|value2|...|valueN| |
                                    |+------+------+   +------+ |
                                    |+-----+                    |
                                    ||value|                    |
                                    |+-----+                    |
                                    +---------------------------+
            
             Each distinct type of DataPoint represents the output of a specific
             aggregation function, the result of applying the DataPoint's
             associated function of to one or more measurements.
            
             All DataPoint types have three common fields:
             - Attributes includes key-value pairs associated with the data point
             - TimeUnixNano is required, set to the end time of the aggregation
             - StartTimeUnixNano is optional, but strongly encouraged for DataPoints
               having an AggregationTemporality field, as discussed below.
            
             Both TimeUnixNano and StartTimeUnixNano values are expressed as
             UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.
            
             # TimeUnixNano
            
             This field is required, having consistent interpretation across
             DataPoint types.  TimeUnixNano is the moment corresponding to when
             the data point's aggregate value was captured.
            
             Data points with the 0 value for TimeUnixNano SHOULD be rejected
             by consumers.
            
             # StartTimeUnixNano
            
             StartTimeUnixNano in general allows detecting when a sequence of
             observations is unbroken.  This field indicates to consumers the
             start time for points with cumulative and delta
             AggregationTemporality, and it should be included whenever possible
             to support correct rate calculation.  Although it may be omitted
             when the start time is truly unknown, setting StartTimeUnixNano is
             strongly encouraged.
             </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Metrics.V1.Metric.NameFieldNumber">
            <summary>Field number for the "name" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Metrics.V1.Metric.Name">
            <summary>
            name of the metric, including its DNS name prefix. It must be unique.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Metrics.V1.Metric.DescriptionFieldNumber">
            <summary>Field number for the "description" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Metrics.V1.Metric.Description">
            <summary>
            description of the metric, which can be used in documentation.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Metrics.V1.Metric.UnitFieldNumber">
            <summary>Field number for the "unit" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Metrics.V1.Metric.Unit">
            <summary>
            unit in which the metric value is reported. Follows the format
            described by http://unitsofmeasure.org/ucum.html.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Metrics.V1.Metric.GaugeFieldNumber">
            <summary>Field number for the "gauge" field.</summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Metrics.V1.Metric.SumFieldNumber">
            <summary>Field number for the "sum" field.</summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Metrics.V1.Metric.HistogramFieldNumber">
            <summary>Field number for the "histogram" field.</summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Metrics.V1.Metric.ExponentialHistogramFieldNumber">
            <summary>Field number for the "exponential_histogram" field.</summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Metrics.V1.Metric.SummaryFieldNumber">
            <summary>Field number for the "summary" field.</summary>
        </member>
        <member name="T:OpenTelemetry.Proto.Metrics.V1.Metric.DataOneofCase">
            <summary>Enum of possible cases for the "data" oneof.</summary>
        </member>
        <member name="T:OpenTelemetry.Proto.Metrics.V1.Gauge">
             <summary>
             Gauge represents the type of a scalar metric that always exports the
             "current value" for every data point. It should be used for an "unknown"
             aggregation.
            
             A Gauge does not support different aggregation temporalities. Given the
             aggregation is unknown, points cannot be combined using the same
             aggregation, regardless of aggregation temporalities. Therefore,
             AggregationTemporality is not included. Consequently, this also means
             "StartTimeUnixNano" is ignored for all data points.
             </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Metrics.V1.Gauge.DataPointsFieldNumber">
            <summary>Field number for the "data_points" field.</summary>
        </member>
        <member name="T:OpenTelemetry.Proto.Metrics.V1.Sum">
            <summary>
            Sum represents the type of a scalar metric that is calculated as a sum of all
            reported measurements over a time interval.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Metrics.V1.Sum.DataPointsFieldNumber">
            <summary>Field number for the "data_points" field.</summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Metrics.V1.Sum.AggregationTemporalityFieldNumber">
            <summary>Field number for the "aggregation_temporality" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Metrics.V1.Sum.AggregationTemporality">
            <summary>
            aggregation_temporality describes if the aggregator reports delta changes
            since last report time, or cumulative changes since a fixed start time.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Metrics.V1.Sum.IsMonotonicFieldNumber">
            <summary>Field number for the "is_monotonic" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Metrics.V1.Sum.IsMonotonic">
            <summary>
            If "true" means that the sum is monotonic.
            </summary>
        </member>
        <member name="T:OpenTelemetry.Proto.Metrics.V1.Histogram">
            <summary>
            Histogram represents the type of a metric that is calculated by aggregating
            as a Histogram of all reported measurements over a time interval.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Metrics.V1.Histogram.DataPointsFieldNumber">
            <summary>Field number for the "data_points" field.</summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Metrics.V1.Histogram.AggregationTemporalityFieldNumber">
            <summary>Field number for the "aggregation_temporality" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Metrics.V1.Histogram.AggregationTemporality">
            <summary>
            aggregation_temporality describes if the aggregator reports delta changes
            since last report time, or cumulative changes since a fixed start time.
            </summary>
        </member>
        <member name="T:OpenTelemetry.Proto.Metrics.V1.ExponentialHistogram">
            <summary>
            ExponentialHistogram represents the type of a metric that is calculated by aggregating
            as a ExponentialHistogram of all reported double measurements over a time interval.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Metrics.V1.ExponentialHistogram.DataPointsFieldNumber">
            <summary>Field number for the "data_points" field.</summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Metrics.V1.ExponentialHistogram.AggregationTemporalityFieldNumber">
            <summary>Field number for the "aggregation_temporality" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Metrics.V1.ExponentialHistogram.AggregationTemporality">
            <summary>
            aggregation_temporality describes if the aggregator reports delta changes
            since last report time, or cumulative changes since a fixed start time.
            </summary>
        </member>
        <member name="T:OpenTelemetry.Proto.Metrics.V1.Summary">
            <summary>
            Summary metric data are used to convey quantile summaries,
            a Prometheus (see: https://prometheus.io/docs/concepts/metric_types/#summary)
            and OpenMetrics (see: https://github.com/OpenObservability/OpenMetrics/blob/4dbf6075567ab43296eed941037c12951faafb92/protos/prometheus.proto#L45)
            data type. These data points cannot always be merged in a meaningful way.
            While they can be useful in some applications, histogram data points are
            recommended for new applications.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Metrics.V1.Summary.DataPointsFieldNumber">
            <summary>Field number for the "data_points" field.</summary>
        </member>
        <member name="T:OpenTelemetry.Proto.Metrics.V1.NumberDataPoint">
            <summary>
            NumberDataPoint is a single data point in a timeseries that describes the
            time-varying scalar value of a metric.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Metrics.V1.NumberDataPoint.AttributesFieldNumber">
            <summary>Field number for the "attributes" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Metrics.V1.NumberDataPoint.Attributes">
            <summary>
            The set of key/value pairs that uniquely identify the timeseries from
            where this point belongs. The list may be empty (may contain 0 elements).
            Attribute keys MUST be unique (it is not allowed to have more than one
            attribute with the same key).
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Metrics.V1.NumberDataPoint.StartTimeUnixNanoFieldNumber">
            <summary>Field number for the "start_time_unix_nano" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Metrics.V1.NumberDataPoint.StartTimeUnixNano">
             <summary>
             StartTimeUnixNano is optional but strongly encouraged, see the
             the detailed comments above Metric.
            
             Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
             1970.
             </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Metrics.V1.NumberDataPoint.TimeUnixNanoFieldNumber">
            <summary>Field number for the "time_unix_nano" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Metrics.V1.NumberDataPoint.TimeUnixNano">
             <summary>
             TimeUnixNano is required, see the detailed comments above Metric.
            
             Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
             1970.
             </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Metrics.V1.NumberDataPoint.AsDoubleFieldNumber">
            <summary>Field number for the "as_double" field.</summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Metrics.V1.NumberDataPoint.AsIntFieldNumber">
            <summary>Field number for the "as_int" field.</summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Metrics.V1.NumberDataPoint.ExemplarsFieldNumber">
            <summary>Field number for the "exemplars" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Metrics.V1.NumberDataPoint.Exemplars">
            <summary>
            (Optional) List of exemplars collected from
            measurements that were used to form the data point
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Metrics.V1.NumberDataPoint.FlagsFieldNumber">
            <summary>Field number for the "flags" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Metrics.V1.NumberDataPoint.Flags">
            <summary>
            Flags that apply to this specific data point.  See DataPointFlags
            for the available flags and their meaning.
            </summary>
        </member>
        <member name="T:OpenTelemetry.Proto.Metrics.V1.NumberDataPoint.ValueOneofCase">
            <summary>Enum of possible cases for the "value" oneof.</summary>
        </member>
        <member name="T:OpenTelemetry.Proto.Metrics.V1.HistogramDataPoint">
             <summary>
             HistogramDataPoint is a single data point in a timeseries that describes the
             time-varying values of a Histogram. A Histogram contains summary statistics
             for a population of values, it may optionally contain the distribution of
             those values across a set of buckets.
            
             If the histogram contains the distribution of values, then both
             "explicit_bounds" and "bucket counts" fields must be defined.
             If the histogram does not contain the distribution of values, then both
             "explicit_bounds" and "bucket_counts" must be omitted and only "count" and
             "sum" are known.
             </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Metrics.V1.HistogramDataPoint.AttributesFieldNumber">
            <summary>Field number for the "attributes" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Metrics.V1.HistogramDataPoint.Attributes">
            <summary>
            The set of key/value pairs that uniquely identify the timeseries from
            where this point belongs. The list may be empty (may contain 0 elements).
            Attribute keys MUST be unique (it is not allowed to have more than one
            attribute with the same key).
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Metrics.V1.HistogramDataPoint.StartTimeUnixNanoFieldNumber">
            <summary>Field number for the "start_time_unix_nano" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Metrics.V1.HistogramDataPoint.StartTimeUnixNano">
             <summary>
             StartTimeUnixNano is optional but strongly encouraged, see the
             the detailed comments above Metric.
            
             Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
             1970.
             </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Metrics.V1.HistogramDataPoint.TimeUnixNanoFieldNumber">
            <summary>Field number for the "time_unix_nano" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Metrics.V1.HistogramDataPoint.TimeUnixNano">
             <summary>
             TimeUnixNano is required, see the detailed comments above Metric.
            
             Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
             1970.
             </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Metrics.V1.HistogramDataPoint.CountFieldNumber">
            <summary>Field number for the "count" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Metrics.V1.HistogramDataPoint.Count">
            <summary>
            count is the number of values in the population. Must be non-negative. This
            value must be equal to the sum of the "count" fields in buckets if a
            histogram is provided.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Metrics.V1.HistogramDataPoint.SumFieldNumber">
            <summary>Field number for the "sum" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Metrics.V1.HistogramDataPoint.Sum">
             <summary>
             sum of the values in the population. If count is zero then this field
             must be zero.
            
             Note: Sum should only be filled out when measuring non-negative discrete
             events, and is assumed to be monotonic over the values of these events.
             Negative events *can* be recorded, but sum should not be filled out when
             doing so.  This is specifically to enforce compatibility w/ OpenMetrics,
             see: https://github.com/OpenObservability/OpenMetrics/blob/main/specification/OpenMetrics.md#histogram
             </summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Metrics.V1.HistogramDataPoint.HasSum">
            <summary>Gets whether the "sum" field is set</summary>
        </member>
        <member name="M:OpenTelemetry.Proto.Metrics.V1.HistogramDataPoint.ClearSum">
            <summary>Clears the value of the "sum" field</summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Metrics.V1.HistogramDataPoint.BucketCountsFieldNumber">
            <summary>Field number for the "bucket_counts" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Metrics.V1.HistogramDataPoint.BucketCounts">
             <summary>
             bucket_counts is an optional field contains the count values of histogram
             for each bucket.
            
             The sum of the bucket_counts must equal the value in the count field.
            
             The number of elements in bucket_counts array must be by one greater than
             the number of elements in explicit_bounds array.
             </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Metrics.V1.HistogramDataPoint.ExplicitBoundsFieldNumber">
            <summary>Field number for the "explicit_bounds" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Metrics.V1.HistogramDataPoint.ExplicitBounds">
             <summary>
             explicit_bounds specifies buckets with explicitly defined bounds for values.
            
             The boundaries for bucket at index i are:
            
             (-infinity, explicit_bounds[i]] for i == 0
             (explicit_bounds[i-1], explicit_bounds[i]] for 0 &lt; i &lt; size(explicit_bounds)
             (explicit_bounds[i-1], +infinity) for i == size(explicit_bounds)
            
             The values in the explicit_bounds array must be strictly increasing.
            
             Histogram buckets are inclusive of their upper boundary, except the last
             bucket where the boundary is at infinity. This format is intentionally
             compatible with the OpenMetrics histogram definition.
             </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Metrics.V1.HistogramDataPoint.ExemplarsFieldNumber">
            <summary>Field number for the "exemplars" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Metrics.V1.HistogramDataPoint.Exemplars">
            <summary>
            (Optional) List of exemplars collected from
            measurements that were used to form the data point
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Metrics.V1.HistogramDataPoint.FlagsFieldNumber">
            <summary>Field number for the "flags" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Metrics.V1.HistogramDataPoint.Flags">
            <summary>
            Flags that apply to this specific data point.  See DataPointFlags
            for the available flags and their meaning.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Metrics.V1.HistogramDataPoint.MinFieldNumber">
            <summary>Field number for the "min" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Metrics.V1.HistogramDataPoint.Min">
            <summary>
            min is the minimum value over (start_time, end_time].
            </summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Metrics.V1.HistogramDataPoint.HasMin">
            <summary>Gets whether the "min" field is set</summary>
        </member>
        <member name="M:OpenTelemetry.Proto.Metrics.V1.HistogramDataPoint.ClearMin">
            <summary>Clears the value of the "min" field</summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Metrics.V1.HistogramDataPoint.MaxFieldNumber">
            <summary>Field number for the "max" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Metrics.V1.HistogramDataPoint.Max">
            <summary>
            max is the maximum value over (start_time, end_time].
            </summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Metrics.V1.HistogramDataPoint.HasMax">
            <summary>Gets whether the "max" field is set</summary>
        </member>
        <member name="M:OpenTelemetry.Proto.Metrics.V1.HistogramDataPoint.ClearMax">
            <summary>Clears the value of the "max" field</summary>
        </member>
        <member name="T:OpenTelemetry.Proto.Metrics.V1.ExponentialHistogramDataPoint">
            <summary>
            ExponentialHistogramDataPoint is a single data point in a timeseries that describes the
            time-varying values of a ExponentialHistogram of double values. A ExponentialHistogram contains
            summary statistics for a population of values, it may optionally contain the
            distribution of those values across a set of buckets.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Metrics.V1.ExponentialHistogramDataPoint.AttributesFieldNumber">
            <summary>Field number for the "attributes" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Metrics.V1.ExponentialHistogramDataPoint.Attributes">
            <summary>
            The set of key/value pairs that uniquely identify the timeseries from
            where this point belongs. The list may be empty (may contain 0 elements).
            Attribute keys MUST be unique (it is not allowed to have more than one
            attribute with the same key).
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Metrics.V1.ExponentialHistogramDataPoint.StartTimeUnixNanoFieldNumber">
            <summary>Field number for the "start_time_unix_nano" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Metrics.V1.ExponentialHistogramDataPoint.StartTimeUnixNano">
             <summary>
             StartTimeUnixNano is optional but strongly encouraged, see the
             the detailed comments above Metric.
            
             Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
             1970.
             </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Metrics.V1.ExponentialHistogramDataPoint.TimeUnixNanoFieldNumber">
            <summary>Field number for the "time_unix_nano" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Metrics.V1.ExponentialHistogramDataPoint.TimeUnixNano">
             <summary>
             TimeUnixNano is required, see the detailed comments above Metric.
            
             Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
             1970.
             </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Metrics.V1.ExponentialHistogramDataPoint.CountFieldNumber">
            <summary>Field number for the "count" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Metrics.V1.ExponentialHistogramDataPoint.Count">
            <summary>
            count is the number of values in the population. Must be
            non-negative. This value must be equal to the sum of the "bucket_counts"
            values in the positive and negative Buckets plus the "zero_count" field.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Metrics.V1.ExponentialHistogramDataPoint.SumFieldNumber">
            <summary>Field number for the "sum" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Metrics.V1.ExponentialHistogramDataPoint.Sum">
             <summary>
             sum of the values in the population. If count is zero then this field
             must be zero.
            
             Note: Sum should only be filled out when measuring non-negative discrete
             events, and is assumed to be monotonic over the values of these events.
             Negative events *can* be recorded, but sum should not be filled out when
             doing so.  This is specifically to enforce compatibility w/ OpenMetrics,
             see: https://github.com/OpenObservability/OpenMetrics/blob/main/specification/OpenMetrics.md#histogram
             </summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Metrics.V1.ExponentialHistogramDataPoint.HasSum">
            <summary>Gets whether the "sum" field is set</summary>
        </member>
        <member name="M:OpenTelemetry.Proto.Metrics.V1.ExponentialHistogramDataPoint.ClearSum">
            <summary>Clears the value of the "sum" field</summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Metrics.V1.ExponentialHistogramDataPoint.ScaleFieldNumber">
            <summary>Field number for the "scale" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Metrics.V1.ExponentialHistogramDataPoint.Scale">
             <summary>
             scale describes the resolution of the histogram.  Boundaries are
             located at powers of the base, where:
            
               base = (2^(2^-scale))
            
             The histogram bucket identified by `index`, a signed integer,
             contains values that are greater than or equal to (base^index) and
             less than (base^(index+1)).
            
             The positive and negative ranges of the histogram are expressed
             separately.  Negative values are mapped by their absolute value
             into the negative range using the same scale as the positive range.
            
             scale is not restricted by the protocol, as the permissible
             values depend on the range of the data.
             </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Metrics.V1.ExponentialHistogramDataPoint.ZeroCountFieldNumber">
            <summary>Field number for the "zero_count" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Metrics.V1.ExponentialHistogramDataPoint.ZeroCount">
             <summary>
             zero_count is the count of values that are either exactly zero or
             within the region considered zero by the instrumentation at the
             tolerated degree of precision.  This bucket stores values that
             cannot be expressed using the standard exponential formula as
             well as values that have been rounded to zero.
            
             Implementations MAY consider the zero bucket to have probability
             mass equal to (zero_count / count).
             </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Metrics.V1.ExponentialHistogramDataPoint.PositiveFieldNumber">
            <summary>Field number for the "positive" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Metrics.V1.ExponentialHistogramDataPoint.Positive">
            <summary>
            positive carries the positive range of exponential bucket counts.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Metrics.V1.ExponentialHistogramDataPoint.NegativeFieldNumber">
            <summary>Field number for the "negative" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Metrics.V1.ExponentialHistogramDataPoint.Negative">
            <summary>
            negative carries the negative range of exponential bucket counts.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Metrics.V1.ExponentialHistogramDataPoint.FlagsFieldNumber">
            <summary>Field number for the "flags" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Metrics.V1.ExponentialHistogramDataPoint.Flags">
            <summary>
            Flags that apply to this specific data point.  See DataPointFlags
            for the available flags and their meaning.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Metrics.V1.ExponentialHistogramDataPoint.ExemplarsFieldNumber">
            <summary>Field number for the "exemplars" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Metrics.V1.ExponentialHistogramDataPoint.Exemplars">
            <summary>
            (Optional) List of exemplars collected from
            measurements that were used to form the data point
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Metrics.V1.ExponentialHistogramDataPoint.MinFieldNumber">
            <summary>Field number for the "min" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Metrics.V1.ExponentialHistogramDataPoint.Min">
            <summary>
            min is the minimum value over (start_time, end_time].
            </summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Metrics.V1.ExponentialHistogramDataPoint.HasMin">
            <summary>Gets whether the "min" field is set</summary>
        </member>
        <member name="M:OpenTelemetry.Proto.Metrics.V1.ExponentialHistogramDataPoint.ClearMin">
            <summary>Clears the value of the "min" field</summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Metrics.V1.ExponentialHistogramDataPoint.MaxFieldNumber">
            <summary>Field number for the "max" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Metrics.V1.ExponentialHistogramDataPoint.Max">
            <summary>
            max is the maximum value over (start_time, end_time].
            </summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Metrics.V1.ExponentialHistogramDataPoint.HasMax">
            <summary>Gets whether the "max" field is set</summary>
        </member>
        <member name="M:OpenTelemetry.Proto.Metrics.V1.ExponentialHistogramDataPoint.ClearMax">
            <summary>Clears the value of the "max" field</summary>
        </member>
        <member name="T:OpenTelemetry.Proto.Metrics.V1.ExponentialHistogramDataPoint.Types">
            <summary>Container for nested types declared in the ExponentialHistogramDataPoint message type.</summary>
        </member>
        <member name="T:OpenTelemetry.Proto.Metrics.V1.ExponentialHistogramDataPoint.Types.Buckets">
            <summary>
            Buckets are a set of bucket counts, encoded in a contiguous array
            of counts.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Metrics.V1.ExponentialHistogramDataPoint.Types.Buckets.OffsetFieldNumber">
            <summary>Field number for the "offset" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Metrics.V1.ExponentialHistogramDataPoint.Types.Buckets.Offset">
            <summary>
            Offset is the bucket index of the first entry in the bucket_counts array.
            
            Note: This uses a varint encoding as a simple form of compression.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Metrics.V1.ExponentialHistogramDataPoint.Types.Buckets.BucketCountsFieldNumber">
            <summary>Field number for the "bucket_counts" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Metrics.V1.ExponentialHistogramDataPoint.Types.Buckets.BucketCounts">
             <summary>
             Count is an array of counts, where count[i] carries the count
             of the bucket at index (offset+i).  count[i] is the count of
             values greater than or equal to base^(offset+i) and less than
             base^(offset+i+1).
            
             Note: By contrast, the explicit HistogramDataPoint uses
             fixed64.  This field is expected to have many buckets,
             especially zeros, so uint64 has been selected to ensure
             varint encoding.
             </summary>
        </member>
        <member name="T:OpenTelemetry.Proto.Metrics.V1.SummaryDataPoint">
            <summary>
            SummaryDataPoint is a single data point in a timeseries that describes the
            time-varying values of a Summary metric.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Metrics.V1.SummaryDataPoint.AttributesFieldNumber">
            <summary>Field number for the "attributes" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Metrics.V1.SummaryDataPoint.Attributes">
            <summary>
            The set of key/value pairs that uniquely identify the timeseries from
            where this point belongs. The list may be empty (may contain 0 elements).
            Attribute keys MUST be unique (it is not allowed to have more than one
            attribute with the same key).
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Metrics.V1.SummaryDataPoint.StartTimeUnixNanoFieldNumber">
            <summary>Field number for the "start_time_unix_nano" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Metrics.V1.SummaryDataPoint.StartTimeUnixNano">
             <summary>
             StartTimeUnixNano is optional but strongly encouraged, see the
             the detailed comments above Metric.
            
             Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
             1970.
             </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Metrics.V1.SummaryDataPoint.TimeUnixNanoFieldNumber">
            <summary>Field number for the "time_unix_nano" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Metrics.V1.SummaryDataPoint.TimeUnixNano">
             <summary>
             TimeUnixNano is required, see the detailed comments above Metric.
            
             Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
             1970.
             </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Metrics.V1.SummaryDataPoint.CountFieldNumber">
            <summary>Field number for the "count" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Metrics.V1.SummaryDataPoint.Count">
            <summary>
            count is the number of values in the population. Must be non-negative.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Metrics.V1.SummaryDataPoint.SumFieldNumber">
            <summary>Field number for the "sum" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Metrics.V1.SummaryDataPoint.Sum">
             <summary>
             sum of the values in the population. If count is zero then this field
             must be zero.
            
             Note: Sum should only be filled out when measuring non-negative discrete
             events, and is assumed to be monotonic over the values of these events.
             Negative events *can* be recorded, but sum should not be filled out when
             doing so.  This is specifically to enforce compatibility w/ OpenMetrics,
             see: https://github.com/OpenObservability/OpenMetrics/blob/main/specification/OpenMetrics.md#summary
             </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Metrics.V1.SummaryDataPoint.QuantileValuesFieldNumber">
            <summary>Field number for the "quantile_values" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Metrics.V1.SummaryDataPoint.QuantileValues">
            <summary>
            (Optional) list of values at different quantiles of the distribution calculated
            from the current snapshot. The quantiles must be strictly increasing.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Metrics.V1.SummaryDataPoint.FlagsFieldNumber">
            <summary>Field number for the "flags" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Metrics.V1.SummaryDataPoint.Flags">
            <summary>
            Flags that apply to this specific data point.  See DataPointFlags
            for the available flags and their meaning.
            </summary>
        </member>
        <member name="T:OpenTelemetry.Proto.Metrics.V1.SummaryDataPoint.Types">
            <summary>Container for nested types declared in the SummaryDataPoint message type.</summary>
        </member>
        <member name="T:OpenTelemetry.Proto.Metrics.V1.SummaryDataPoint.Types.ValueAtQuantile">
             <summary>
             Represents the value at a given quantile of a distribution.
            
             To record Min and Max values following conventions are used:
             - The 1.0 quantile is equivalent to the maximum value observed.
             - The 0.0 quantile is equivalent to the minimum value observed.
            
             See the following issue for more context:
             https://github.com/open-telemetry/opentelemetry-proto/issues/125
             </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Metrics.V1.SummaryDataPoint.Types.ValueAtQuantile.QuantileFieldNumber">
            <summary>Field number for the "quantile" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Metrics.V1.SummaryDataPoint.Types.ValueAtQuantile.Quantile">
            <summary>
            The quantile of a distribution. Must be in the interval
            [0.0, 1.0].
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Metrics.V1.SummaryDataPoint.Types.ValueAtQuantile.ValueFieldNumber">
            <summary>Field number for the "value" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Metrics.V1.SummaryDataPoint.Types.ValueAtQuantile.Value">
             <summary>
             The value at the given quantile of a distribution.
            
             Quantile values must NOT be negative.
             </summary>
        </member>
        <member name="T:OpenTelemetry.Proto.Metrics.V1.Exemplar">
            <summary>
            A representation of an exemplar, which is a sample input measurement.
            Exemplars also hold information about the environment when the measurement
            was recorded, for example the span and trace ID of the active span when the
            exemplar was recorded.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Metrics.V1.Exemplar.FilteredAttributesFieldNumber">
            <summary>Field number for the "filtered_attributes" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Metrics.V1.Exemplar.FilteredAttributes">
            <summary>
            The set of key/value pairs that were filtered out by the aggregator, but
            recorded alongside the original measurement. Only key/value pairs that were
            filtered out by the aggregator should be included
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Metrics.V1.Exemplar.TimeUnixNanoFieldNumber">
            <summary>Field number for the "time_unix_nano" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Metrics.V1.Exemplar.TimeUnixNano">
             <summary>
             time_unix_nano is the exact time when this exemplar was recorded
            
             Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
             1970.
             </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Metrics.V1.Exemplar.AsDoubleFieldNumber">
            <summary>Field number for the "as_double" field.</summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Metrics.V1.Exemplar.AsIntFieldNumber">
            <summary>Field number for the "as_int" field.</summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Metrics.V1.Exemplar.SpanIdFieldNumber">
            <summary>Field number for the "span_id" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Metrics.V1.Exemplar.SpanId">
            <summary>
            (Optional) Span ID of the exemplar trace.
            span_id may be missing if the measurement is not recorded inside a trace
            or if the trace is not sampled.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Metrics.V1.Exemplar.TraceIdFieldNumber">
            <summary>Field number for the "trace_id" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Metrics.V1.Exemplar.TraceId">
            <summary>
            (Optional) Trace ID of the exemplar trace.
            trace_id may be missing if the measurement is not recorded inside a trace
            or if the trace is not sampled.
            </summary>
        </member>
        <member name="T:OpenTelemetry.Proto.Metrics.V1.Exemplar.ValueOneofCase">
            <summary>Enum of possible cases for the "value" oneof.</summary>
        </member>
        <member name="T:OpenTelemetry.Proto.Resource.V1.ResourceReflection">
            <summary>Holder for reflection information generated from opentelemetry/proto/resource/v1/resource.proto</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Resource.V1.ResourceReflection.Descriptor">
            <summary>File descriptor for opentelemetry/proto/resource/v1/resource.proto</summary>
        </member>
        <member name="T:OpenTelemetry.Proto.Resource.V1.Resource">
            <summary>
            Resource information.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Resource.V1.Resource.AttributesFieldNumber">
            <summary>Field number for the "attributes" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Resource.V1.Resource.Attributes">
            <summary>
            Set of attributes that describe the resource.
            Attribute keys MUST be unique (it is not allowed to have more than one
            attribute with the same key).
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Resource.V1.Resource.DroppedAttributesCountFieldNumber">
            <summary>Field number for the "dropped_attributes_count" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Resource.V1.Resource.DroppedAttributesCount">
            <summary>
            dropped_attributes_count is the number of dropped attributes. If the value is 0, then
            no attributes were dropped.
            </summary>
        </member>
        <member name="T:OpenTelemetry.Proto.Trace.V1.TraceReflection">
            <summary>Holder for reflection information generated from opentelemetry/proto/trace/v1/trace.proto</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Trace.V1.TraceReflection.Descriptor">
            <summary>File descriptor for opentelemetry/proto/trace/v1/trace.proto</summary>
        </member>
        <member name="T:OpenTelemetry.Proto.Trace.V1.TracesData">
             <summary>
             TracesData represents the traces data that can be stored in a persistent storage,
             OR can be embedded by other protocols that transfer OTLP traces data but do
             not implement the OTLP protocol.
            
             The main difference between this message and collector protocol is that
             in this message there will not be any "control" or "metadata" specific to
             OTLP protocol.
            
             When new fields are added into this message, the OTLP request MUST be updated
             as well.
             </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Trace.V1.TracesData.ResourceSpansFieldNumber">
            <summary>Field number for the "resource_spans" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Trace.V1.TracesData.ResourceSpans">
            <summary>
            An array of ResourceSpans.
            For data coming from a single resource this array will typically contain
            one element. Intermediary nodes that receive data from multiple origins
            typically batch the data before forwarding further and in that case this
            array will contain multiple elements.
            </summary>
        </member>
        <member name="T:OpenTelemetry.Proto.Trace.V1.ResourceSpans">
            <summary>
            A collection of ScopeSpans from a Resource.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Trace.V1.ResourceSpans.ResourceFieldNumber">
            <summary>Field number for the "resource" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Trace.V1.ResourceSpans.Resource">
            <summary>
            The resource for the spans in this message.
            If this field is not set then no resource info is known.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Trace.V1.ResourceSpans.ScopeSpansFieldNumber">
            <summary>Field number for the "scope_spans" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Trace.V1.ResourceSpans.ScopeSpans">
            <summary>
            A list of ScopeSpans that originate from a resource.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Trace.V1.ResourceSpans.SchemaUrlFieldNumber">
            <summary>Field number for the "schema_url" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Trace.V1.ResourceSpans.SchemaUrl">
            <summary>
            This schema_url applies to the data in the "resource" field. It does not apply
            to the data in the "scope_spans" field which have their own schema_url field.
            </summary>
        </member>
        <member name="T:OpenTelemetry.Proto.Trace.V1.ScopeSpans">
            <summary>
            A collection of Spans produced by an InstrumentationScope.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Trace.V1.ScopeSpans.ScopeFieldNumber">
            <summary>Field number for the "scope" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Trace.V1.ScopeSpans.Scope">
            <summary>
            The instrumentation scope information for the spans in this message.
            Semantically when InstrumentationScope isn't set, it is equivalent with
            an empty instrumentation scope name (unknown).
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Trace.V1.ScopeSpans.SpansFieldNumber">
            <summary>Field number for the "spans" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Trace.V1.ScopeSpans.Spans">
            <summary>
            A list of Spans that originate from an instrumentation scope.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Trace.V1.ScopeSpans.SchemaUrlFieldNumber">
            <summary>Field number for the "schema_url" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Trace.V1.ScopeSpans.SchemaUrl">
            <summary>
            This schema_url applies to all spans and span events in the "spans" field.
            </summary>
        </member>
        <member name="T:OpenTelemetry.Proto.Trace.V1.Span">
             <summary>
             A Span represents a single operation performed by a single component of the system.
            
             The next available field id is 17.
             </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Trace.V1.Span.TraceIdFieldNumber">
            <summary>Field number for the "trace_id" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Trace.V1.Span.TraceId">
             <summary>
             A unique identifier for a trace. All spans from the same trace share
             the same `trace_id`. The ID is a 16-byte array. An ID with all zeroes
             is considered invalid.
            
             This field is semantically required. Receiver should generate new
             random trace_id if empty or invalid trace_id was received.
            
             This field is required.
             </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Trace.V1.Span.SpanIdFieldNumber">
            <summary>Field number for the "span_id" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Trace.V1.Span.SpanId">
             <summary>
             A unique identifier for a span within a trace, assigned when the span
             is created. The ID is an 8-byte array. An ID with all zeroes is considered
             invalid.
            
             This field is semantically required. Receiver should generate new
             random span_id if empty or invalid span_id was received.
            
             This field is required.
             </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Trace.V1.Span.TraceStateFieldNumber">
            <summary>Field number for the "trace_state" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Trace.V1.Span.TraceState">
            <summary>
            trace_state conveys information about request position in multiple distributed tracing graphs.
            It is a trace_state in w3c-trace-context format: https://www.w3.org/TR/trace-context/#tracestate-header
            See also https://github.com/w3c/distributed-tracing for more details about this field.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Trace.V1.Span.ParentSpanIdFieldNumber">
            <summary>Field number for the "parent_span_id" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Trace.V1.Span.ParentSpanId">
            <summary>
            The `span_id` of this span's parent span. If this is a root span, then this
            field must be empty. The ID is an 8-byte array.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Trace.V1.Span.NameFieldNumber">
            <summary>Field number for the "name" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Trace.V1.Span.Name">
             <summary>
             A description of the span's operation.
            
             For example, the name can be a qualified method name or a file name
             and a line number where the operation is called. A best practice is to use
             the same display name at the same call point in an application.
             This makes it easier to correlate spans in different traces.
            
             This field is semantically required to be set to non-empty string.
             Empty value is equivalent to an unknown span name.
            
             This field is required.
             </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Trace.V1.Span.KindFieldNumber">
            <summary>Field number for the "kind" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Trace.V1.Span.Kind">
            <summary>
            Distinguishes between spans generated in a particular context. For example,
            two spans with the same name may be distinguished using `CLIENT` (caller)
            and `SERVER` (callee) to identify queueing latency associated with the span.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Trace.V1.Span.StartTimeUnixNanoFieldNumber">
            <summary>Field number for the "start_time_unix_nano" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Trace.V1.Span.StartTimeUnixNano">
             <summary>
             start_time_unix_nano is the start time of the span. On the client side, this is the time
             kept by the local machine where the span execution starts. On the server side, this
             is the time when the server's application handler starts running.
             Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.
            
             This field is semantically required and it is expected that end_time >= start_time.
             </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Trace.V1.Span.EndTimeUnixNanoFieldNumber">
            <summary>Field number for the "end_time_unix_nano" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Trace.V1.Span.EndTimeUnixNano">
             <summary>
             end_time_unix_nano is the end time of the span. On the client side, this is the time
             kept by the local machine where the span execution ends. On the server side, this
             is the time when the server application handler stops running.
             Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.
            
             This field is semantically required and it is expected that end_time >= start_time.
             </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Trace.V1.Span.AttributesFieldNumber">
            <summary>Field number for the "attributes" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Trace.V1.Span.Attributes">
             <summary>
             attributes is a collection of key/value pairs. Note, global attributes
             like server name can be set using the resource API. Examples of attributes:
            
                 "/http/user_agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36"
                 "/http/server_latency": 300
                 "abc.com/myattribute": true
                 "abc.com/score": 10.239
            
             The OpenTelemetry API specification further restricts the allowed value types:
             https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/common/README.md#attribute
             Attribute keys MUST be unique (it is not allowed to have more than one
             attribute with the same key).
             </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Trace.V1.Span.DroppedAttributesCountFieldNumber">
            <summary>Field number for the "dropped_attributes_count" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Trace.V1.Span.DroppedAttributesCount">
            <summary>
            dropped_attributes_count is the number of attributes that were discarded. Attributes
            can be discarded because their keys are too long or because there are too many
            attributes. If this value is 0, then no attributes were dropped.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Trace.V1.Span.EventsFieldNumber">
            <summary>Field number for the "events" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Trace.V1.Span.Events">
            <summary>
            events is a collection of Event items.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Trace.V1.Span.DroppedEventsCountFieldNumber">
            <summary>Field number for the "dropped_events_count" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Trace.V1.Span.DroppedEventsCount">
            <summary>
            dropped_events_count is the number of dropped events. If the value is 0, then no
            events were dropped.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Trace.V1.Span.LinksFieldNumber">
            <summary>Field number for the "links" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Trace.V1.Span.Links">
            <summary>
            links is a collection of Links, which are references from this span to a span
            in the same or different trace.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Trace.V1.Span.DroppedLinksCountFieldNumber">
            <summary>Field number for the "dropped_links_count" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Trace.V1.Span.DroppedLinksCount">
            <summary>
            dropped_links_count is the number of dropped links after the maximum size was
            enforced. If this value is 0, then no links were dropped.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Trace.V1.Span.StatusFieldNumber">
            <summary>Field number for the "status" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Trace.V1.Span.Status">
            <summary>
            An optional final status for this span. Semantically when Status isn't set, it means
            span's status code is unset, i.e. assume STATUS_CODE_UNSET (code = 0).
            </summary>
        </member>
        <member name="T:OpenTelemetry.Proto.Trace.V1.Span.Types">
            <summary>Container for nested types declared in the Span message type.</summary>
        </member>
        <member name="T:OpenTelemetry.Proto.Trace.V1.Span.Types.SpanKind">
            <summary>
            SpanKind is the type of span. Can be used to specify additional relationships between spans
            in addition to a parent/child relationship.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Trace.V1.Span.Types.SpanKind.Unspecified">
            <summary>
            Unspecified. Do NOT use as default.
            Implementations MAY assume SpanKind to be INTERNAL when receiving UNSPECIFIED.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Trace.V1.Span.Types.SpanKind.Internal">
            <summary>
            Indicates that the span represents an internal operation within an application,
            as opposed to an operation happening at the boundaries. Default value.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Trace.V1.Span.Types.SpanKind.Server">
            <summary>
            Indicates that the span covers server-side handling of an RPC or other
            remote network request.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Trace.V1.Span.Types.SpanKind.Client">
            <summary>
            Indicates that the span describes a request to some remote service.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Trace.V1.Span.Types.SpanKind.Producer">
            <summary>
            Indicates that the span describes a producer sending a message to a broker.
            Unlike CLIENT and SERVER, there is often no direct critical path latency relationship
            between producer and consumer spans. A PRODUCER span ends when the message was accepted
            by the broker while the logical processing of the message might span a much longer time.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Trace.V1.Span.Types.SpanKind.Consumer">
            <summary>
            Indicates that the span describes consumer receiving a message from a broker.
            Like the PRODUCER kind, there is often no direct critical path latency relationship
            between producer and consumer spans.
            </summary>
        </member>
        <member name="T:OpenTelemetry.Proto.Trace.V1.Span.Types.Event">
            <summary>
            Event is a time-stamped annotation of the span, consisting of user-supplied
            text description and key-value pairs.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Trace.V1.Span.Types.Event.TimeUnixNanoFieldNumber">
            <summary>Field number for the "time_unix_nano" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Trace.V1.Span.Types.Event.TimeUnixNano">
            <summary>
            time_unix_nano is the time the event occurred.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Trace.V1.Span.Types.Event.NameFieldNumber">
            <summary>Field number for the "name" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Trace.V1.Span.Types.Event.Name">
            <summary>
            name of the event.
            This field is semantically required to be set to non-empty string.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Trace.V1.Span.Types.Event.AttributesFieldNumber">
            <summary>Field number for the "attributes" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Trace.V1.Span.Types.Event.Attributes">
            <summary>
            attributes is a collection of attribute key/value pairs on the event.
            Attribute keys MUST be unique (it is not allowed to have more than one
            attribute with the same key).
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Trace.V1.Span.Types.Event.DroppedAttributesCountFieldNumber">
            <summary>Field number for the "dropped_attributes_count" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Trace.V1.Span.Types.Event.DroppedAttributesCount">
            <summary>
            dropped_attributes_count is the number of dropped attributes. If the value is 0,
            then no attributes were dropped.
            </summary>
        </member>
        <member name="T:OpenTelemetry.Proto.Trace.V1.Span.Types.Link">
            <summary>
            A pointer from the current span to another span in the same trace or in a
            different trace. For example, this can be used in batching operations,
            where a single batch handler processes multiple requests from different
            traces or when the handler receives a request from a different project.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Trace.V1.Span.Types.Link.TraceIdFieldNumber">
            <summary>Field number for the "trace_id" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Trace.V1.Span.Types.Link.TraceId">
            <summary>
            A unique identifier of a trace that this linked span is part of. The ID is a
            16-byte array.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Trace.V1.Span.Types.Link.SpanIdFieldNumber">
            <summary>Field number for the "span_id" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Trace.V1.Span.Types.Link.SpanId">
            <summary>
            A unique identifier for the linked span. The ID is an 8-byte array.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Trace.V1.Span.Types.Link.TraceStateFieldNumber">
            <summary>Field number for the "trace_state" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Trace.V1.Span.Types.Link.TraceState">
            <summary>
            The trace_state associated with the link.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Trace.V1.Span.Types.Link.AttributesFieldNumber">
            <summary>Field number for the "attributes" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Trace.V1.Span.Types.Link.Attributes">
            <summary>
            attributes is a collection of attribute key/value pairs on the link.
            Attribute keys MUST be unique (it is not allowed to have more than one
            attribute with the same key).
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Trace.V1.Span.Types.Link.DroppedAttributesCountFieldNumber">
            <summary>Field number for the "dropped_attributes_count" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Trace.V1.Span.Types.Link.DroppedAttributesCount">
            <summary>
            dropped_attributes_count is the number of dropped attributes. If the value is 0,
            then no attributes were dropped.
            </summary>
        </member>
        <member name="T:OpenTelemetry.Proto.Trace.V1.Status">
            <summary>
            The Status type defines a logical error model that is suitable for different
            programming environments, including REST APIs and RPC APIs.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Trace.V1.Status.MessageFieldNumber">
            <summary>Field number for the "message" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Trace.V1.Status.Message">
            <summary>
            A developer-facing human readable error message.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Trace.V1.Status.CodeFieldNumber">
            <summary>Field number for the "code" field.</summary>
        </member>
        <member name="P:OpenTelemetry.Proto.Trace.V1.Status.Code">
            <summary>
            The status code.
            </summary>
        </member>
        <member name="T:OpenTelemetry.Proto.Trace.V1.Status.Types">
            <summary>Container for nested types declared in the Status message type.</summary>
        </member>
        <member name="T:OpenTelemetry.Proto.Trace.V1.Status.Types.StatusCode">
            <summary>
            For the semantics of status codes see
            https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/api.md#set-status
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Trace.V1.Status.Types.StatusCode.Unset">
            <summary>
            The default status.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Trace.V1.Status.Types.StatusCode.Ok">
            <summary>
            The Span has been validated by an Application developers or Operator to have
            completed successfully.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Proto.Trace.V1.Status.Types.StatusCode.Error">
            <summary>
            The Span contains an error.
            </summary>
        </member>
        <member name="T:Microsoft.Extensions.Configuration.EnvironmentVariables.EnvironmentVariablesConfigurationProvider">
            <summary>
            An environment variable based <see cref="T:Microsoft.Extensions.Configuration.ConfigurationProvider"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.EnvironmentVariables.EnvironmentVariablesConfigurationProvider.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.EnvironmentVariables.EnvironmentVariablesConfigurationProvider.#ctor(System.String)">
            <summary>
            Initializes a new instance with the specified prefix.
            </summary>
            <param name="prefix">A prefix used to filter the environment variables.</param>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.EnvironmentVariables.EnvironmentVariablesConfigurationProvider.Load">
            <summary>
            Loads the environment variables.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.EnvironmentVariables.EnvironmentVariablesConfigurationProvider.ToString">
            <summary>
            Generates a string representing this provider name and relevant details.
            </summary>
            <returns> The configuration name. </returns>
        </member>
        <member name="T:Microsoft.Extensions.Configuration.EnvironmentVariables.EnvironmentVariablesConfigurationSource">
            <summary>
            Represents environment variables as an <see cref="T:Microsoft.Extensions.Configuration.IConfigurationSource"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Configuration.EnvironmentVariables.EnvironmentVariablesConfigurationSource.Prefix">
            <summary>
            A prefix used to filter environment variables.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.EnvironmentVariables.EnvironmentVariablesConfigurationSource.Build(Microsoft.Extensions.Configuration.IConfigurationBuilder)">
            <summary>
            Builds the <see cref="T:Microsoft.Extensions.Configuration.EnvironmentVariables.EnvironmentVariablesConfigurationProvider"/> for this source.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder"/>.</param>
            <returns>A <see cref="T:Microsoft.Extensions.Configuration.EnvironmentVariables.EnvironmentVariablesConfigurationProvider"/></returns>
        </member>
        <member name="T:Microsoft.Extensions.Configuration.EnvironmentVariablesExtensions">
            <summary>
            Extension methods for registering <see cref="T:Microsoft.Extensions.Configuration.EnvironmentVariables.EnvironmentVariablesConfigurationProvider"/> with <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.EnvironmentVariablesExtensions.AddEnvironmentVariables(Microsoft.Extensions.Configuration.IConfigurationBuilder)">
            <summary>
            Adds an <see cref="T:Microsoft.Extensions.Configuration.IConfigurationProvider"/> that reads configuration values from environment variables.
            </summary>
            <param name="configurationBuilder">The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder"/> to add to.</param>
            <returns>The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.EnvironmentVariablesExtensions.AddEnvironmentVariables(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.String)">
            <summary>
            Adds an <see cref="T:Microsoft.Extensions.Configuration.IConfigurationProvider"/> that reads configuration values from environment variables
            with a specified prefix.
            </summary>
            <param name="configurationBuilder">The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder"/> to add to.</param>
            <param name="prefix">The prefix that environment variable names must start with. The prefix will be removed from the environment variable names.</param>
            <returns>The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.EnvironmentVariablesExtensions.AddEnvironmentVariables(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.Action{Microsoft.Extensions.Configuration.EnvironmentVariables.EnvironmentVariablesConfigurationSource})">
            <summary>
            Adds an <see cref="T:Microsoft.Extensions.Configuration.IConfigurationProvider"/> that reads configuration values from environment variables.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder"/> to add to.</param>
            <param name="configureSource">Configures the source.</param>
            <returns>The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder"/>.</returns>
        </member>
        <member name="T:Microsoft.Extensions.Options.DelegatingOptionsFactory`1">
            <summary>
            Implementation of <see cref="T:Microsoft.Extensions.Options.IOptionsFactory`1"/>.
            </summary>
            <typeparam name="TOptions">The type of options being requested.</typeparam>
        </member>
        <member name="M:Microsoft.Extensions.Options.DelegatingOptionsFactory`1.#ctor(System.Func{Microsoft.Extensions.Configuration.IConfiguration,System.String,`0},Microsoft.Extensions.Configuration.IConfiguration,System.Collections.Generic.IEnumerable{Microsoft.Extensions.Options.IConfigureOptions{`0}},System.Collections.Generic.IEnumerable{Microsoft.Extensions.Options.IPostConfigureOptions{`0}},System.Collections.Generic.IEnumerable{Microsoft.Extensions.Options.IValidateOptions{`0}})">
            <summary>
            Initializes a new instance with the specified options configurations.
            </summary>
            <param name="setups">The configuration actions to run.</param>
            <param name="postConfigures">The initialization actions to run.</param>
            <param name="validations">The validations to run.</param>
        </member>
        <member name="M:Microsoft.Extensions.Options.DelegatingOptionsFactory`1.Create(System.String)">
            <summary>
            Returns a configured <typeparamref name="TOptions"/> instance with the given <paramref name="name"/>.
            </summary>
            <param name="name">The name of the <typeparamref name="TOptions"/> instance to create.</param>
            <returns>The created <typeparamref name="TOptions"/> instance with the given <paramref name="name"/>.</returns>
            <exception cref="T:Microsoft.Extensions.Options.OptionsValidationException">One or more <see cref="T:Microsoft.Extensions.Options.IValidateOptions`1"/> return failed <see cref="T:Microsoft.Extensions.Options.ValidateOptionsResult"/> when validating the <typeparamref name="TOptions"/> instance been created.</exception>
            <exception cref="T:System.MissingMethodException">The <typeparamref name="TOptions"/> does not have a public parameterless constructor or <typeparamref name="TOptions"/> is <see langword="abstract"/>.</exception>
        </member>
    </members>
</doc>
